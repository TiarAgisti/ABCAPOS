using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ABCAPOS.EDM;
using ABCAPOS.Models;
using MPL.Business;
using ABCAPOS.DA;
using ABCAPOS.Util;
using System.Transactions;
using ABCAPOS.ReportEDS;
using MPL;

namespace ABCAPOS.BF
{
    public class WorkOrderBFC:MasterDetailBFC<WorkOrder,v_WorkOrder,WorkOrderDetail,v_WorkOrderDetail,WorkOrderModel,WorkOrderDetailModel>
    {
        private void ValidateInput(WorkOrderModel header, List<WorkOrderDetailModel> details)
        {
            if (details.Count == 0)
            {
                throw new Exception("product material can not be empty");
            }
            else
            {
                foreach (var detail in details)
                {
                    if (detail.ProductDetailID == 0)
                        throw new Exception("Product not chosen");
                }
            }
          
        }

        protected override GenericDetailDAC<WorkOrderDetail, WorkOrderDetailModel> GetDetailDAC()
        {
            return new GenericDetailDAC<WorkOrderDetail, WorkOrderDetailModel>("WorkOrderID","ItemNo",false);
        }

        protected override GenericDetailDAC<v_WorkOrderDetail, WorkOrderDetailModel> GetDetailViewDAC()
        {
            return new GenericDetailDAC<v_WorkOrderDetail, WorkOrderDetailModel>("WorkOrderID","ItemNo",false);
        }

        protected override GenericDAC<WorkOrder, WorkOrderModel> GetMasterDAC()
        {
            return new GenericDAC<WorkOrder, WorkOrderModel>("ID", false, "Date DESC");
        }

        protected override GenericDAC<v_WorkOrder, WorkOrderModel> GetMasterViewDAC()
        {
            return new GenericDAC<v_WorkOrder, WorkOrderModel>("ID", false, "Date DESC");
        }

        public override string GenerateID()
        {
            throw new NotImplementedException();
        }

        public override void Create(WorkOrderModel header, List<WorkOrderDetailModel> details)
        {
            this.ValidateInput(header, details);

            header.Code = GetWorkOrderCode(header);
            
            base.Create(header, details);
        }

        public override void Update(WorkOrderModel header,List<WorkOrderDetailModel>details)
        {
            this.ValidateInput(header,details);

            base.Update(header,details);
        }

        public void Validate(long workOrderID)
        {
            var details = base.RetrieveDetails(workOrderID);
            if (details != null)
            {
                foreach (var detail in details)
                {
                    if (detail.QtyOnHand < detail.Qty)
                    {
                        var product = new ProductBFC().RetrieveByID(detail.ProductDetailID);
                        if (product != null)
                        {
                            throw new Exception("Qty on hand " + product.ProductName + " tidak mencukupi");
                        }
                        else
                        {
                            throw new Exception("Qty on hand tidak mencukupi");
                        }
                    } 
                }
            }
        }

        public string GetWorkOrderCode(WorkOrderModel header)
        {
            var prefixSetting = new PrefixSettingBFC().Retrieve();
            var workOrderPrefix = "";

            if (prefixSetting != null)
                workOrderPrefix = prefixSetting.WorkOrderPrefix;

            var warehouse = new WarehouseBFC().RetrieveByID(header.WarehouseID);
            var year = DateTime.Now.Year.ToString().Substring(2, 2);

            var prefix = workOrderPrefix + year + "-" + warehouse.Code + "-";
            var code = new ABCAPOSDAC().RetreiveWorkOrderMaxCode(prefix, 7);

            return code;
        }

        public void CreatedByFormulasi(WorkOrderModel workOrder, long productID, decimal qty, long salesorderID)
        {
            var formulasi = new FormulasiBFC().RetrieveByID(productID);

            if (formulasi != null)
            {
                var SO = new SalesOrderBFC().RetrieveByID(salesorderID);
                if (SO != null)
                {
                    workOrder.SalesOrderID = salesorderID;
                    workOrder.SalesOrderCode = SO.Code;
                    workOrder.CustomerID = SO.CustomerID;
                    workOrder.CustomerName = SO.CustomerName;
                }
                workOrder.Code = SystemConstants.autoGenerated;
                workOrder.ProductID = formulasi.ProductID;

                var product = new ProductBFC().RetrieveByID(workOrder.ProductID);
                workOrder.ProductCode = product.Code;
                workOrder.ProductName = product.ProductName;

                if (qty != 0)
                {
                    workOrder.QtyWO = qty;
                }


                var unit = new UnitBFC().GetUnitDetailByID(product.StockUnitID);
                if (unit == null)
                {
                    //var UnitDefault = new UnitBFC().GetUnitByID(product.UnitTypeID);
                    workOrder.ConversionName = "";
                }
                else
                {
                    workOrder.ConversionName = unit.Name;
                }
                //workOrder.ConversionName = unit.Name;

                var woDetails = new FormulasiBFC().RetreiveByProductID(productID).OrderBy(p => p.ItemNo);
                var workOrderDetails = new List<WorkOrderDetailModel>();

                foreach (var woDetail in woDetails)
                {
                    var detail = new WorkOrderDetailModel();
                    var productDetail = new ProductBFC().RetrieveByID(woDetail.ProductDetailID);
                    detail.ItemNo = woDetail.ItemNo;
                    detail.ProductDetailID = woDetail.ProductDetailID;
                    detail.ProductCode = woDetail.ProductCode;
                    detail.ProductName = woDetail.ProductName;

                    if (qty != 0)
                    {
                        detail.Qty = woDetail.Qty * Convert.ToDouble(qty);
                        detail.StockQtyHidden = woDetail.Qty;
                    }
                    else
                    {
                        detail.Qty = woDetail.Qty;
                        detail.StockQtyHidden = woDetail.Qty;
                    }

                    //detail.UnitID = woDetail.ConversionID;
                    detail.ConversionID = woDetail.ConversionID;
                    detail.ConversionIDTemp = woDetail.ConversionID;
                    detail.ConversionName = woDetail.ConversionName;
                    detail.ItemTypeID = productDetail.ItemTypeID;

                    detail.UnitRate = new ProductBFC().GetUnitRate(detail.UnitID);
                    var itemLoc = new ItemLocationBFC().RetrieveByProductIDWarehouseID(woDetail.ProductDetailID, product.WarehouseID);
                    if (itemLoc != null)
                        detail.QtyOnHand = itemLoc.QtyOnHand / detail.UnitRate;
                    else
                        detail.QtyOnHand = 0;

                    if (itemLoc != null)
                        detail.QtyAvailable = itemLoc.QtyAvailable / detail.UnitRate;
                    else
                        detail.QtyAvailable = 0;

                    workOrderDetails.Add(detail);
                }
                workOrder.Details = workOrderDetails;
            }
            else
            {
                workOrder.Code = SystemConstants.autoGenerated;
                var SO = new SalesOrderBFC().RetrieveByID(salesorderID);
                if (SO != null)
                {
                    workOrder.SalesOrderID = salesorderID;
                    workOrder.SalesOrderCode = SO.Code;
                    workOrder.CustomerID = SO.CustomerID;
                    workOrder.CustomerName = SO.CustomerName;
                }
                workOrder.ProductID = productID;

                var product = new ProductBFC().RetrieveByID(productID);
                workOrder.ProductCode = product.Code;
                workOrder.ProductName = product.ProductName;

                var unit = new UnitBFC().GetUnitDetailByID(product.StockUnitID);
                workOrder.ConversionName = unit.Name;
            }

        }

        public void Approve(long workOrderID, string userName)
        {
            //this.Validate(workOrderID);

            var workOrder = RetrieveByID(workOrderID);

            workOrder.Status = (int)MPL.DocumentStatus.Approved;

            workOrder.ApprovedBy = userName;

            workOrder.ApprovedDate = DateTime.Now;

            Update(workOrder);
        }

        public void Void(WorkOrderModel header, string userName)
        {
            var obj = RetrieveByID(header.ID);

            obj.VoidRemarks = header.VoidRemarks;
            obj.Status = (int)MPL.DocumentStatus.Void;
            //workOrder.ApprovedBy = "";
            //workOrder.App rovedDate = SystemConstants.UnsetDateTime;
            base.Update(obj);
        }

        public List<WorkOrderModel> Retreive(int startIndex, int amount, string sortParameter, List<SelectFilter> selectFilters, bool showVoidDocuments, dynamic ViewBag)
        {
            if ((bool)ViewBag.AllowViewFG)
            {
                return new ABCAPOSDAC().RetreiveWorkOrderFG(startIndex, amount, sortParameter, selectFilters, showVoidDocuments);
            }
            else 
            {
                return new ABCAPOSDAC().RetreiveWorkOrder(startIndex, amount, sortParameter, selectFilters, showVoidDocuments);
            }
          
        }

        public List<WorkOrderModel> RetreiveFG(int startIndex, int amount, string sortParameter, List<SelectFilter> selectFilters, bool showVoidDocuments)
        {
            return new ABCAPOSDAC().RetreiveWorkOrderFG(startIndex, amount, sortParameter, selectFilters, showVoidDocuments);
        }

        public List<WorkOrderModel> RetreiveWorkOrderByproductID(long productID)
        {
            return new ABCAPOSDAC().RetreiveWorkOrderByproductID(productID);
        }

        public WorkOrderDetailModel RetreiveQtyByWorkOrderID(long WorkorderID,long productDetailID)
        {
            return new ABCAPOSDAC().RetreiveQtyByID(WorkorderID,productDetailID);
        }

        public List<WorkOrderDetailModel> RetreiveByWorkorderID(long workOrderID)
        {
            return new ABCAPOSDAC().RetreiveVwWorkOrderByWoID(workOrderID);
        }

        public int RetreiveCount(List<SelectFilter> selectFilters, bool showVoidDocuments, dynamic ViewBag)
        {
            if ((bool)ViewBag.AllowViewFG)
            {
                return new ABCAPOSDAC().RetreiveWorkOrderCountFG(selectFilters, showVoidDocuments);
            }
            else
            {
                return new ABCAPOSDAC().RetreiveWorkOrderCount(selectFilters, showVoidDocuments);
            }
           
        }

        public int RetreiveCountFG(List<SelectFilter> selectFilters, bool showVoidDocuments)
        {
            return new ABCAPOSDAC().RetreiveWorkOrderCountFG(selectFilters, showVoidDocuments);
        }

        public ABCAPOSReportEDSC.WorkOrderDTRow RetrievePrintOut(long workOrderID)
        {
            return new ABCAPOSReportDAC().RetreiveWorkOrderPrintOut(workOrderID);
        }

        public ABCAPOSReportEDSC.WorkOrderDTRow RetrievePrintOutStruk(long workOrderID)
        {
            return new ABCAPOSReportDAC().RetreiveWorkOrderPrintOutStruk(workOrderID);
        }

        public ABCAPOSReportEDSC.WorkOrderDetailDTDataTable RetrieveDetailPrintOut(long workOrderID)
        {
            return new ABCAPOSReportDAC().RetreiveWorkOrderDetailPrintOut(workOrderID);
        }

    }
}
