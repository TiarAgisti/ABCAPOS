using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ABCAPOS.Models;
using MPL.MVC;
using ABCAPOS.BF;
using ABCAPOS.DA;
using ABCAPOS.Util;
using ABCAPOS.Helpers;
using System.Transactions;

namespace ABCAPOS.Controllers
{
    public class AssemblyUnBuildController : MasterDetailController<AssemblyUnBuildModel,AssemblyUnBuildDetailModel>
    {
        private string ModuleID
        {
            get
            {
                return "AssemblyUnBuild";
            }
        }

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);
            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
            ViewBag.AllowVoid = roleDetails.Contains("Void");
            ViewBag.AllowViewFG = roleDetails.Contains("ViewFinishGood");
            ViewBag.AllowViewALL = roleDetails.Contains("ViewALL");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMessage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetViewBagDetail(AssemblyUnBuildModel header, List<AssemblyUnBuildDetailModel> details)
        {
            var productID = Request.QueryString["ProductID"];
            if (!string.IsNullOrEmpty(productID))
                new AssemblyUnBuildBFC().PrepareUnBuildByFormulasi(header, Convert.ToInt64(productID));
        }

        public override MPL.Business.IMasterDetailBFC<AssemblyUnBuildModel, AssemblyUnBuildDetailModel> GetBFC()
        {
            return new AssemblyUnBuildBFC();
        }

        protected override void PreCreateDisplay(AssemblyUnBuildModel header, List<AssemblyUnBuildDetailModel> details)
        {
            ViewBag.BinList = new BinBFC().RetrieveAll();
            this.SetViewBagDetail(header, details);
            header.Code = SystemConstants.autoGenerated;
            base.PreCreateDisplay(header, details);
        }

        protected override void PreDetailDisplay(AssemblyUnBuildModel header, List<AssemblyUnBuildDetailModel> details)
        {
            this.SetViewBagNotification();
            base.PreDetailDisplay(header, details); 
        }

        protected override void PreUpdateDisplay(AssemblyUnBuildModel header, List<AssemblyUnBuildDetailModel> details)
        {
            var Details = new FormulasiBFC().RetreiveByProductID(header.ProductID);
            foreach (var detail in details)
            {
                try
                {
                    detail.StockQtyHidden = Details.Where(p => p.ProductDetailID == detail.ProductDetailID).FirstOrDefault().Qty;
                }
                catch (Exception ex)
                {
                    detail.StockQtyHidden = 1;
                }

            }

            base.PreUpdateDisplay(header, details);
        }

        public override void CreateData(AssemblyUnBuildModel obj, List<AssemblyUnBuildDetailModel> details)
        {
            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    base.CreateData(obj, details);

                    trans.Complete();
                }
                TempData["SuccessNotification"] = "Document has been saved";

            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
            
        }

        public override void UpdateData(AssemblyUnBuildModel obj, List<AssemblyUnBuildDetailModel> details, FormCollection formCollection)
        {
            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    base.UpdateData(obj, details, formCollection);

                    trans.Complete();
                }
                TempData["SuccessNotification"] = "Document has been updated";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            this.SetViewBagPermission();

            ViewBag.WarehouseList = new WarehouseBFC().RetrieveAll();

            var unbuildCount = 0;
            var unbuildList = new List<AssemblyUnBuildModel>();

            if (startIndex == null)
                startIndex = 0;

            if (amount == null)
                amount = 20;

            if (string.IsNullOrEmpty(sortParameter))
                sortParameter = "";

            unbuildCount = new AssemblyUnBuildBFC().RetreiveListCountBuild(filter.GetSelectFilters(), ViewBag);
            unbuildList = new AssemblyUnBuildBFC().RetreiveListUnBuild((int)startIndex, (int)amount, sortParameter, filter.GetSelectFilters(), ViewBag);

            ViewBag.DataCount = unbuildCount;
            ViewBag.PageSize = amount;
            ViewBag.StartIndex = startIndex;
            ViewBag.FilterFields = filter.FilterFields;
            //ViewBag.PageSeriesSize = GetPageSeriesSize();

            return View(unbuildList);
        }

        public override void ApproveData(string key)
        {

            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    new AssemblyUnBuildBFC().Approve(Convert.ToInt32(key), MembershipHelper.GetUserName());

                    trans.Complete();
                }

                TempData["SuccessNotification"] = "Document has been approved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public ActionResult ApproveFromIndex(string key)
        {
            try
            {
                ApproveData(key);

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }


        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var unBuild = new AssemblyUnBuildBFC().RetrieveByID(key);

                ViewBag.VoidFromIndex = voidFromIndex;

                return View(unBuild);
            }
            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(AssemblyUnBuildModel header, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);

            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    new AssemblyUnBuildBFC().Void(header.ID, header.VoidRemarks, MembershipHelper.GetUserName());

                    trans.Complete();
                }
               
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = header.ID, errorMessage = ex.Message });
            }
        }
    }
}
