using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ABCAPOS.Models;
using MPL.MVC;
using ABCAPOS.BF;
using ABCAPOS.DA;
using ABCAPOS.Util;
using ABCAPOS.Helpers;

namespace ABCAPOS.Controllers
{
    public class AssemblyBuildController : MasterDetailController<AssemblyBuildModel,AssemblyBuildDetailModel>
    {

        private string ModuleID
        {
            get
            {
                return "AssemblyBuild";
            }
        }

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);
            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
            ViewBag.AllowVoid = roleDetails.Contains("Void");
            ViewBag.AllowViewFG = roleDetails.Contains("ViewFinishGood");
            ViewBag.AllowViewALL = roleDetails.Contains("ViewALL");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMesage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetPreCreateViewBag()
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
            ViewBag.StaffList = new StaffBFC().Retrieve(true);
            ViewBag.ConversionList = new List<UnitDetailModel>();
        }

        private void SetViewBagDetail(AssemblyBuildModel header, List<AssemblyBuildDetailModel> details)
        {
            var workOrderID = Request.QueryString["workOrderID"];
            if (!string.IsNullOrEmpty(workOrderID))
                new AssemblyBuildBFC().CreatedByWorkOrder(header, Convert.ToInt64(workOrderID));
        }

        public override MPL.Business.IMasterDetailBFC<AssemblyBuildModel, AssemblyBuildDetailModel> GetBFC()
        {
            return new AssemblyBuildBFC();
        }

        protected override void PreCreateDisplay(AssemblyBuildModel header, List<AssemblyBuildDetailModel> details)
        {
            try
            {
                SetViewBagNotification();
                SetPreCreateViewBag();
                SetViewBagDetail(header, details);

                //header.BatchNo = "ABCA" + Convert.ToString(header.Tanggal.ToString("ddMMyy"));
                //header.WarehouseID = new StaffBFC().RetrieveDefaultWarehouseID(MembershipHelper.GetUserName());
                ViewBag.Conversion = new FormulasiBFC().RetreiveByProductID(header.ProductID);
                header.Code = SystemConstants.autoGenerated;
                header.BatchNo = SystemConstants.autoGenerated;

                base.PreCreateDisplay(header, details);
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
          
        }

        protected override void PreDetailDisplay(AssemblyBuildModel header, List<AssemblyBuildDetailModel> details)
        {
            SetPreCreateViewBag();
            SetViewBagNotification();

            header.Details = new AssemblyBuildBFC().RetrieveDetails(header.ID).OrderBy(e => e.ItemNo).ToList();
            base.PreDetailDisplay(header, header.Details);
        }

        protected override void PreUpdateDisplay(AssemblyBuildModel header, List<AssemblyBuildDetailModel> details)
        {
            SetPreCreateViewBag();
            SetViewBagNotification();

            //header.WarehouseID = new StaffBFC().RetrieveDefaultWarehouseID(MembershipHelper.GetUserName());
            ViewBag.Conversion = new FormulasiBFC().RetreiveByProductID(header.ProductID);

            header.Details = new AssemblyBuildBFC().RetrieveDetails(header.ID).OrderBy(e => e.ItemNo).ToList();

            base.PreUpdateDisplay(header, header.Details);
        }

        protected void SetPreEditDetailViewBag(WorkOrderModel header, List<WorkOrderDetailModel> details)
        {
            foreach (var detail in details)
            {
                detail.ConversionIDTemp = detail.UnitID;
            }
        }

        public override void CreateData(AssemblyBuildModel obj, List<AssemblyBuildDetailModel> details)
        {
            try
            {
                //SetViewBagDetail(obj, details);
                base.CreateData(obj, details);
                TempData["SuccessNotification"] = "Dokumen berhasil disimpan";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
           
        }

        public override void UpdateData(AssemblyBuildModel obj, List<AssemblyBuildDetailModel> details, FormCollection formCollection)
        {
            try
            {
                base.UpdateData(obj, details, formCollection);
                TempData["SuccessNotification"] = "Dokumen berhasil diupdate";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;

            }
        }

        public override void ApproveData(string key)
        {

            try
            {
                new AssemblyBuildBFC().Approve(Convert.ToInt32(key), MembershipHelper.GetUserName());

                TempData["SuccessNotification"] = "Document has been approved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public ActionResult ApproveFromIndex(string key)
        {
            try
            {
                ApproveData(key);
                //UIMode mode;
                //TempData["SuccessNotification"] = "Document has been approved";

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            this.SetViewBagPermission();
            ViewBag.WarehouseList = new WarehouseBFC().RetrieveAll();

            var buildCount = 0;
            var buildList = new List<AssemblyBuildModel>();

            if (startIndex == null)
                startIndex = 0;

            if (amount == null)
                amount = 20;

            if (string.IsNullOrEmpty(sortParameter))
                sortParameter = "";


            buildCount = new AssemblyBuildBFC().RetreiveListCountBuild(filter.GetSelectFilters(),ViewBag);
            buildList = new AssemblyBuildBFC().RetreiveListBuild((int)startIndex, (int)amount, sortParameter, filter.GetSelectFilters(),ViewBag);

            //var woList = new List<WorkOrderModel>();
            //if (MembershipHelper.GetRoleID() == (int)PermissionStatus.AdminProduksi)
            //{
            //    buildCount = new AssemblyBuildBFC().RetreiveListCountBuildFG(filter.GetSelectFilters());
            //    buildList = new AssemblyBuildBFC().RetreiveListBuildFG((int)startIndex, (int)amount, sortParameter, filter.GetSelectFilters());
            //}
            //else
            //{
            //    buildCount = new AssemblyBuildBFC().RetreiveListCountBuild(filter.GetSelectFilters());
            //    buildList = new AssemblyBuildBFC().RetreiveListBuild((int)startIndex, (int)amount, sortParameter, filter.GetSelectFilters());
            //}

            ViewBag.DataCount = buildCount;
            ViewBag.PageSize = amount;
            ViewBag.StartIndex = startIndex;
            ViewBag.FilterFields = filter.FilterFields;
            //ViewBag.PageSeriesSize = GetPageSeriesSize();

            return View(buildList);
           
        }

        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var AssemblyBuild = new AssemblyBuildBFC().RetrieveByID(key);

                ViewBag.VoidFromIndex = voidFromIndex;

                return View(AssemblyBuild);
            }
            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(AssemblyBuildModel header, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);

            try
            {
                //new AssemblyBuildBFC().VoidWorkOrder(header.WorkOrderID);

                new AssemblyBuildBFC().Void(header.ID, header.VoidRemarks,MembershipHelper.GetUserName());

                //TempData["SuccessNotification"] = "Document has been canceled";

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = header.ID, errorMessage = ex.Message });
            }
        }
    }
}
