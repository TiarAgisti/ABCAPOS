using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Transactions;
using ABCAPOS.Models;
using MPL.MVC;
using ABCAPOS.BF;
using ABCAPOS.DA;
using ABCAPOS.Util;
using ABCAPOS.Helpers;

namespace ABCAPOS.Controllers
{
    public class InventoryAdjustmentController : MasterDetailController<InventoryAdjustmentModel, InventoryAdjustmentDetailModel>
    {

        private string ModuleID
        {
            get
            {
                return "InventoryAdjustment";
            }
        }

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);

            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMessage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetPreEditViewBag(InventoryAdjustmentModel header)
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
            //ViewBag.StaffList = new StaffBFC().Retrieve(true);
            ViewBag.ConversionList = new ProductBFC().RetrieveAllUnits();
        }

        private void SetEditableViews(InventoryAdjustmentModel header)
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
            ViewBag.BinList = new BinBFC().RetrieveAll();
        }

        public override MPL.Business.IMasterDetailBFC<InventoryAdjustmentModel, InventoryAdjustmentDetailModel> GetBFC()
        {
            return new InventoryAdjustmentBFC();
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            SetViewBagPermission();
            return base.Index(startIndex, amount, sortParameter, filter);
        }

        protected override void PreCreateDisplay(InventoryAdjustmentModel header, List<InventoryAdjustmentDetailModel> details)
        {
            SetEditableViews(header);

            var inventoryAdjustmentID = Request.QueryString["inventoryAdjustmentID"];

            if (!string.IsNullOrEmpty(inventoryAdjustmentID))
                new InventoryAdjustmentBFC().CopyTransaction(header, Convert.ToInt64(inventoryAdjustmentID));

            header.Code = SystemConstants.autoGenerated; //new InventoryAdjustmentBFC().GetInventoryAdjustmentCode();
            header.WarehouseID = new StaffBFC().RetrieveDefaultWarehouseID(MembershipHelper.GetUserName());

            base.PreCreateDisplay(header, details);
        }

        protected override void PreDetailDisplay(InventoryAdjustmentModel header, List<InventoryAdjustmentDetailModel> details)
        {
            SetViewBagNotification();
            SetViewBagPermission();
            SetEditableViews(header);
            base.PreDetailDisplay(header, details);
        }

        protected override void PreUpdateDisplay(InventoryAdjustmentModel header, List<InventoryAdjustmentDetailModel> details)
        {
            SetPreEditViewBag(header);
            SetEditableViews(header);
            foreach (var detail in details)
            {
                if (!header.HasCounted && header.CreatedBy == "MIGRATION")
                {
                    var itemLocation = new ItemLocationBFC().RetrieveByProductIDWarehouseID(detail.ProductID, header.WarehouseID);
                    detail.QtyOnHandOld = itemLocation.QtyOnHand;
                }

                detail.QtyOnHand = detail.QtyOnHandOld;

                var unit = new UnitBFC().GetUnitDetailByID(detail.ConversionID);
                double rate;
                if (unit != null)
                    rate = (double)unit.Rate;
                else
                    rate = 1;
                detail.QtyOnHandHidden = detail.QtyOnHand * rate;
                detail.NewQty = detail.QtyOnHandOld + detail.Quantity;
                detail.QtyOnHandNew = detail.NewQty;
            }
            base.PreUpdateDisplay(header, details);
        }

        public override void CreateData(InventoryAdjustmentModel obj, List<InventoryAdjustmentDetailModel> details)
        {
            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    new InventoryAdjustmentBFC().Validate(obj, details);
                    base.CreateData(obj, details);

                    TempData["SuccessNotification"] = "Document has been saved";

                    trans.Complete();
                }
               
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
        }

        public override void UpdateData(InventoryAdjustmentModel obj, List<InventoryAdjustmentDetailModel> details, FormCollection col)
        {
            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    var bfc = new InventoryAdjustmentBFC();
                    //bfc.UndoQuantities(obj.ID);
                    base.UpdateData(obj, details, col);

                    TempData["SuccessNotification"] = "Document has been Update";

                    trans.Complete();
                }
               
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
           
        }

        public override void ApproveData(string key)
        {

            try
            {
                new InventoryAdjustmentBFC().Approve(Convert.ToInt32(key), MembershipHelper.GetUserName());

                TempData["SuccessNotification"] = "Document has been approved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }
       
        public ActionResult ApproveFromIndex(string key)
        {
            try
            {
                ApproveData(key);
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
        }

        public ActionResult VoidFromIndex(string key)
        {
            base.VoidData(key);
            return RedirectToAction("Index");
        }

        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var document = new InventoryAdjustmentBFC().RetrieveByID(key);
                ViewBag.VoidFromIndex = voidFromIndex;
                return View(document);
            }
            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(InventoryAdjustmentModel masterDoc, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);
            try
            {
                new InventoryAdjustmentBFC().Void(masterDoc.ID, masterDoc.VoidRemarks, MembershipHelper.GetUserName());

                return RedirectToAction("Index");

                //TempData["SuccessNotification"] = "Document has been cancelled";

                //if (voidFromIndex)
                //    return RedirectToAction("Index");
                //else
                //    return RedirectToAction("Detail", new { key = masterDoc.ID });
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = masterDoc.ID, errorMessage = ex.Message });
            }
        }

        //[HttpPost, ValidateInput(false)]
        //public ActionResult CreateInventoryAdjustment (InventoryAdjustmentModel obj, FormCollection col)
        //{
        //    try
        //    {
        //        new InventoryAdjustmentBFC().Validate(obj, obj.Details);
        //        base.Create(obj);
        //        return RedirectToAction("Detail", new { key = obj.ID });
        //    }
        //    catch (Exception ex)
        //    {
        //        ViewBag.ErrorNotification = ex.Message;
        //        SetPreEditViewBag(obj);
        //        ViewBag.Mode = UIMode.Create;
        //        SetViewBagPermission();
        //        // TODO: find out what this does
        //        return RedirectToAction("Create", new { inventoryAdjustmentID = obj.ID, errorMessage = ex.Message });
        //    }

        //}

        //public override void UpdateData(InventoryAdjustmentModel obj, List<InventoryAdjustmentDetailModel> details, FormCollection formCollection)
        //{
        //    try
        //    {
        //        new InventoryAdjustmentBFC().Validate(obj, details);
        //        base.UpdateData(obj, details, formCollection);
        //        TempData["SuccessNotification"] = "Document has been saved";
        //    }
        //    catch (Exception ex)
        //    {
        //        ViewBag.ErrorNotification = ex.Message;
        //        throw;
        //    }
        //}
    }
}
