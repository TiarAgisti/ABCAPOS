using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ABCAPOS.Models;
using MPL.MVC;
using ABCAPOS.BF;
using ABCAPOS.DA;
using ABCAPOS.Util;
using ABCAPOS.Helpers;
using System.Transactions;

namespace ABCAPOS.Controllers
{
    public class VendorReturnController : MasterDetailController<VendorReturnModel, VendorReturnDetailModel>
    {
        private void AssignItemNo(VendorReturnModel header, List<VendorReturnDetailModel> details)
        {
            int maxItemNo = details.Max(p => p.ItemNo);

            foreach (VendorReturnDetailModel detail in details)
            {
                if (detail.ItemNo == 0)
                {
                    detail.ItemNo = maxItemNo + 1;
                    maxItemNo++;
                }
            }
        }
        private string ModuleID
        {
            get
            {
                return "VendorReturn";
            }
        }

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);

            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
            ViewBag.AllowVoid = roleDetails.Contains("Void");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMessage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetDetail(VendorReturnModel header, List<VendorReturnDetailModel> details)
        {
            foreach (var detail in details)
            {
                var unitRate = new ProductBFC().GetUnitRate(detail.ConversionID);

                if (unitRate == 0)
                {
                    unitRate = 1;
                }
                detail.StockQty = detail.StockQty / unitRate;
                detail.StockAvailable = detail.StockAvailable / unitRate;
            }
        }

        public override MPL.Business.IMasterDetailBFC<VendorReturnModel, VendorReturnDetailModel> GetBFC()
        {
            return new VendorReturnBFC();
        }

        private void SetPreCreateViewBag(VendorReturnModel header)
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
            ViewBag.StaffList = new StaffBFC().Retrieve(true);
            ViewBag.ConversionList = new ProductBFC().RetrieveAllUnits();
            header.CurrencyID = 1;
            header.CurrencyName = "Rupiah";
            var IsFPPembelianCheckboxList = "<tr><td>FP Pembelian</td><td>:</td><td colspan='5'><input type='checkbox' name='IsFPPembelian' value='" + header.IsFPPembelian + "' ></td></tr>";
            ViewBag.FPembelianCheckboxList = IsFPPembelianCheckboxList;
        }

        private void SetPreEditViewBag(VendorReturnModel header)
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
            ViewBag.ConversionList = new ProductBFC().RetrieveAllUnits();
            ViewBag.StaffList = new StaffBFC().Retrieve(true);
        }

        protected override List<Button> GetAdditionalButtons(VendorReturnModel header, List<VendorReturnDetailModel> details, UIMode mode)
        {
            var list = new List<Button>();
            // TODO: implement print VendorReturn
            if (mode == UIMode.Detail && header.Status >= (int)MPL.DocumentStatus.Approved)
            {
                var print = new Button();
                print.Text = "Print";
                print.CssClass = "button";
                print.ID = "btnPrint";
                print.OnClick = String.Format("window.open('{0}');", Url.Action("PopUp", "ReportViewer",
                    new { type = ReportViewerController.PrintOutType.VendorReturn, queryString = SystemConstants.str_VendorReturnID + "=" + header.ID }));
                print.Href = "#";
                list.Add(print);

            }

            return list;
        }

        protected override void PreCreateDisplay(VendorReturnModel header, List<VendorReturnDetailModel> details)
        {
            SetPreCreateViewBag(header);

            var purchaseOrderID = Request.QueryString["purchaseOrderID"];

            if (!string.IsNullOrEmpty(purchaseOrderID))
                new VendorReturnBFC().PreFillWithPurchaseOrderData(header, Convert.ToInt64(purchaseOrderID));

            header.Code = SystemConstants.autoGenerated; //new VendorReturnBFC().GetVendorReturnCode();
        
            base.PreCreateDisplay(header, details);
        }

        private void SetPreDetailViewBag()
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);

        }

        protected override void PreDetailDisplay(VendorReturnModel header, List<VendorReturnDetailModel> details)
        {
            SetPreDetailViewBag();
            var SJReturnCheckboxList = "";

            if (!header.IsFPPembelian)
            {
                SJReturnCheckboxList += "<tr><td>FP Pembelian</td><td>:</td><td colspan='5'><input type='checkbox' name='IsFPPembelian' value='0'  disabled ></td></tr>";
            }
            else
            {
                SJReturnCheckboxList += "<tr><td>FP Pembelian</td><td>:</td><td colspan='5'><input type='checkbox' name='IsFPPembelian' value='1' checked disabled ></td></tr>";
            }
            ViewBag.FPembelianCheckboxList = SJReturnCheckboxList;


            SetViewBagNotification();

            SetViewBagPermission();

            ViewBag.returnList = new VendorReturnDeliveryBFC().RetrieveByVendorReturnID(header.ID);
            ViewBag.creditList = new BillCreditBFC().RetrieveByVendorReturnID(header.ID);

            this.SetDetail(header, details);
            
            base.PreDetailDisplay(header, details);
        }

        protected override void PreUpdateDisplay(VendorReturnModel header, List<VendorReturnDetailModel> details)
        {
            SetPreEditViewBag(header);

            this.SetDetail(header, details);

            base.PreUpdateDisplay(header, details);
        }

        public override void CreateData(VendorReturnModel obj, List<VendorReturnDetailModel> details)
        {
            var statusOnCreate = obj.Status;
            try
            {
                new VendorReturnBFC().Validate(obj, details);
                if (Request.Form["IsFPPembelian"] != null)
                    obj.IsFPPembelian = true;
                else
                    obj.IsFPPembelian = false;

                AssignItemNo(obj, obj.Details);
                base.CreateData(obj, details);
                obj.Status = statusOnCreate;
                new VendorReturnBFC().Update(obj);

                TempData["SuccessNotification"] = "Document has been saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override void UpdateData(VendorReturnModel obj, List<VendorReturnDetailModel> details, FormCollection formCollection)
        {
            try
            {
                new VendorReturnBFC().Validate(obj, details);
                AssignItemNo(obj, details);
                base.UpdateData(obj, details, formCollection);

                TempData["SuccessNotification"] = "Document has been saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            SetViewBagPermission();

            return base.Index(startIndex, amount, sortParameter, filter);
        }

        public ActionResult ApproveFromIndex(string key)
        {
            try
            {
                ApproveData(key);

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override void ApproveData(string key)
        {
            try
            {
                new VendorReturnBFC().Approve(Convert.ToInt64(key), MembershipHelper.GetUserName());
                new VendorReturnBFC().UpdateStatus(Convert.ToInt64(key));
                TempData["SuccessNotification"] = "Document has been approved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }

        }

        //public ActionResult VoidFromIndex(string key)
        //{
        //    base.VoidData(key);

        //    return RedirectToAction("Index");
        //}
        

        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var vendorReturn = new VendorReturnBFC().RetrieveByID(key);

                ViewBag.VoidFromIndex = voidFromIndex;

                return View(vendorReturn);
            }

            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(VendorReturnModel vendorReturn, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);

            try
            {
                using (TransactionScope trans = new TransactionScope())
                {
                    new VendorReturnBFC().Void(vendorReturn.ID, vendorReturn.VoidRemarks, MembershipHelper.GetUserName());

                    trans.Complete();
                }


                //new EmailHelper().SendVoidVendorReturnEmail(vendorReturn.ID, vendorReturn.VoidRemarks, MembershipHelper.GetUserName());

                TempData["SuccessNotification"] = "Document has been canceled";

                //if (voidFromIndex)
                    return RedirectToAction("Index");
                //else
                    //return RedirectToAction("Detail", new { key = vendorReturn.ID });
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = vendorReturn.ID, errorMessage = ex.Message });
            }

        }
    }
}
