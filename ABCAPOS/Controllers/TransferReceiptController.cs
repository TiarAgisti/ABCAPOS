using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ABCAPOS.Models;
using MPL.MVC;
using ABCAPOS.BF;
using ABCAPOS.Util;
using ABCAPOS.Helpers;

namespace ABCAPOS.Controllers
{
    public class TransferReceiptController : MasterDetailController<TransferReceiptModel, TransferReceiptDetailModel>
    {
        private string ModuleID
        {
            get
            {
                return "TransferReceipt";
            }
        }

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);

            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
            ViewBag.AllowVoid = roleDetails.Contains("Void");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMessage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetEditableViewBags(TransferReceiptModel header)
        {
            ViewBag.DepartmentList = new DepartmentBFC().RetrieveAll();
            ViewBag.BinList = new BinBFC().RetrieveAll();
        }

        public override MPL.Business.IMasterDetailBFC<TransferReceiptModel, TransferReceiptDetailModel> GetBFC()
        {
            return new TransferReceiptBFC();
        }

        protected override void PreCreateDisplay(TransferReceiptModel header, List<TransferReceiptDetailModel> details)
        {
            SetEditableViewBags(header);
            var transferOrderID = Request.QueryString["transferOrderID"];

            var transferDeliveryID=Request.QueryString["transferDeliveryID"];

            if (!string.IsNullOrEmpty(transferOrderID))
                new TransferReceiptBFC().PreFillFromTransferOrder(header, Convert.ToInt64(transferOrderID));

            if (!string.IsNullOrEmpty(transferDeliveryID))
                new TransferReceiptBFC().PreparedByFromTransferDelivery(header, Convert.ToInt64(transferDeliveryID));

            header.Code = SystemConstants.autoGenerated;//new TransferReceiptBFC().GetTransferReceiptCode();

            base.PreCreateDisplay(header, header.Details);
        }

        protected override void PreUpdateDisplay(TransferReceiptModel header, List<TransferReceiptDetailModel> details)
        {
            SetEditableViewBags(header);
            base.PreUpdateDisplay(header, details);
        }

        protected override void PreDetailDisplay(TransferReceiptModel header, List<TransferReceiptDetailModel> details)
        {
            SetViewBagNotification();
            SetViewBagPermission();

            base.PreDetailDisplay(header, details);
        }

        public override void CreateData(TransferReceiptModel obj, List<TransferReceiptDetailModel> details)
        {
            try
            {
                // Disabling validation for now
                //new TransferReceiptBFC().Validate(obj, details);

                base.CreateData(obj, details);
                TempData["SuccessNotification"] = "Document successfully saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override void UpdateData(TransferReceiptModel obj, List<TransferReceiptDetailModel> details, FormCollection formCollection)
        {
            try
            {
                // Disabling validation for now
                //new TransferReceiptBFC().Validate(obj, details);

                base.UpdateData(obj, details, formCollection);

                TempData["SuccessNotification"] = "Document successfully updated";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override void VoidData(string key)
        {
            new TransferReceiptBFC().Void(Convert.ToInt64(key), "", MembershipHelper.GetUserName());
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            SetViewBagPermission();
            return base.Index(startIndex, amount, sortParameter, filter);
        }


        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var deliveryOrder = new TransferReceiptBFC().RetrieveByID(key);

                ViewBag.VoidFromIndex = voidFromIndex;

                return View(deliveryOrder);
            }

            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(TransferReceiptModel transferDelivery, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);

            try
            {
                new TransferReceiptBFC().Void(transferDelivery.ID, transferDelivery.VoidRemarks, MembershipHelper.GetUserName());

                //new EmailHelper().SendVoidDOEmail(transferDelivery.ID, transferDelivery.VoidRemarks, MembershipHelper.GetUserName());

                //TempData["SuccessNotification"] = "Dokumen berhasil dibatalkan";

                //if (voidFromIndex)
                    return RedirectToAction("Index");
                //else
                //    return RedirectToAction("Detail", new { key = transferDelivery.ID });
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = transferDelivery.ID, errorMessage = ex.Message });
            }

        }
    }
}
