using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ABCAPOS.Models;
using MPL.MVC;
using ABCAPOS.BF;
using ABCAPOS.Util;
using ABCAPOS.Helpers;

namespace ABCAPOS.Controllers
{
    public class TransferDeliveryController : MasterDetailController<TransferDeliveryModel, TransferDeliveryDetailModel>
    {
        private string ModuleID
        {
            get
            {
                return "TransferDelivery";
            }
        }

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);

            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
            ViewBag.AllowVoid = roleDetails.Contains("Void");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMessage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetEditableViewBags(TransferDeliveryModel header)
        {
            ViewBag.DriverList = new StaffBFC().Retrieve("Distribution", true);
            ViewBag.BinList = new BinBFC().RetrieveAll();
            var SJReturnCheckboxList = "";
            if (!header.HasSJKembali)
            {
                SJReturnCheckboxList += "<tr><td>SJ Kembali</td><td>:</td><td colspan='5'><input type='checkbox' name='HasSJKembali' value='0' ></td></tr>";
            }
            else
            {
                SJReturnCheckboxList += "<tr><td>SJ Kembali</td><td>:</td><td colspan='5'><input type='checkbox' name='HasSJKembali' value='1' checked></td></tr>";
            }
            ViewBag.SJReturnCheckboxList = SJReturnCheckboxList;
        }

        protected override void PreCreateDisplay(TransferDeliveryModel header, List<TransferDeliveryDetailModel> details)
        {
            SetEditableViewBags(header);

            var transferOrderID = Request.QueryString["transferOrderID"];

            if (!string.IsNullOrEmpty(transferOrderID))
                new TransferDeliveryBFC().PreFillWithTransferOrderData(header, Convert.ToInt64(transferOrderID));

            header.Code = SystemConstants.autoGenerated; //new TransferDeliveryBFC().GetTransferDeliveryCode();

            base.PreCreateDisplay(header, header.Details);
        }

        protected override void PreUpdateDisplay(TransferDeliveryModel header, List<TransferDeliveryDetailModel> details)
        {
            SetEditableViewBags(header);
            base.PreUpdateDisplay(header, details);
        }

        protected override void PreDetailDisplay(TransferDeliveryModel header, List<TransferDeliveryDetailModel> details)
        {
            SetViewBagNotification();
            SetViewBagPermission();

            foreach (var detail in details)
            {
                var unitRate = new ProductBFC().GetUnitRate(detail.ConversionID);
                detail.StockQty = detail.StockQty / unitRate;
            }

            var SJReturnCheckboxList = "";
            if (!header.HasSJKembali)
            {
                SJReturnCheckboxList += "<tr><td>SJ Kembali</td><td>:</td><td colspan='5'><input type='checkbox' name='HasSJKembali' value='0'  disabled ></td></tr>";
            }
            else
            {
                SJReturnCheckboxList += "<tr><td>SJ Kembali</td><td>:</td><td colspan='5'><input type='checkbox' name='HasSJKembali' value='1' checked disabled ></td></tr>";
            }
            ViewBag.SJReturnCheckboxList = SJReturnCheckboxList;

            base.PreDetailDisplay(header, details);
        }

        public override MPL.Business.IMasterDetailBFC<TransferDeliveryModel, TransferDeliveryDetailModel> GetBFC()
        {
            return new TransferDeliveryBFC();
        }

        public override void CreateData(TransferDeliveryModel obj, List<TransferDeliveryDetailModel> details)
        {
            DeliveryOrderStatus statusOnCreate = (DeliveryOrderStatus)obj.Status;

            try
            {
                // skipping validation for now
                //new TransferDeliveryBFC().Validate(obj, details);
                var sjKembali = Request.Form["HasSJKembali"];
                if (sjKembali != null)
                    obj.HasSJKembali = true;
                else
                    obj.HasSJKembali = false;
                base.CreateData(obj, details);
                obj.Status = (int)statusOnCreate;
                new TransferDeliveryBFC().ImplementStatus(obj.ID, MembershipHelper.GetUserName(), DeliveryOrderStatus.Void, statusOnCreate);
                TempData["SuccessNotification"] = "Document successfully saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override void UpdateData(TransferDeliveryModel obj, List<TransferDeliveryDetailModel> details, FormCollection formCollection)
        {
            try
            {
                // disable Validation for now
                //new TransferDeliveryBFC().Validate(obj, details);
                var oldData = new TransferDeliveryBFC().RetrieveByID(obj.ID);
                var bfc = new TransferDeliveryBFC();
                // cancel old data from inventory
                bfc.ImplementStatus(obj.ID, MembershipHelper.GetUserName(), (DeliveryOrderStatus)oldData.Status, DeliveryOrderStatus.Void);
                var sjKembali = Request.Form["HasSJKembali"];
                if (sjKembali != null)
                    obj.HasSJKembali = true;
                else
                    obj.HasSJKembali = false;

                base.UpdateData(obj, details, formCollection);
                // apply new data to inventory
                bfc.ImplementStatus(obj.ID, MembershipHelper.GetUserName(), DeliveryOrderStatus.Void, (DeliveryOrderStatus)obj.Status);

                TempData["SuccessNotification"] = "Document successfully saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public ActionResult Pack(string key)
        {
            var transferDelivery = new TransferDeliveryBFC().RetrieveByID(key);
            new TransferDeliveryBFC().ImplementStatus(Convert.ToInt64(key)
                , MembershipHelper.GetUserName()
                , (DeliveryOrderStatus)transferDelivery.Status
                , DeliveryOrderStatus.Packed);

            return RedirectToAction("Detail", new { key = transferDelivery.ID });
        }

        public ActionResult Ship(string key)
        {
            var transferDelivery = new TransferDeliveryBFC().RetrieveByID(key);
            new TransferDeliveryBFC().ImplementStatus(Convert.ToInt64(key)
                , MembershipHelper.GetUserName()
                , (DeliveryOrderStatus)transferDelivery.Status
                , DeliveryOrderStatus.Shipped);

            return RedirectToAction("Detail", new { key = transferDelivery.ID });
        }

        public ActionResult Pick(string key)
        {
            var transferDelivery = new TransferDeliveryBFC().RetrieveByID(key);
            new TransferDeliveryBFC().ImplementStatus(Convert.ToInt64(key)
                , MembershipHelper.GetUserName()
                , (DeliveryOrderStatus) transferDelivery.Status
                , DeliveryOrderStatus.New);

            return RedirectToAction("Detail", new { key = transferDelivery.ID });
        }

        public ActionResult UnPack(string key)
        {
            var transferDelivery = new TransferDeliveryBFC().RetrieveByID(key);
            new TransferDeliveryBFC().ImplementStatus(Convert.ToInt64(key), MembershipHelper.GetUserName(), DeliveryOrderStatus.Packed, DeliveryOrderStatus.New);

            return RedirectToAction("Detail", new { key = transferDelivery.ID });
        }

        public override void VoidData(string key)
        {
            new TransferDeliveryBFC().Void(Convert.ToInt64(key), "", MembershipHelper.GetUserName());
        }

        protected override List<Button> GetAdditionalButtons(TransferDeliveryModel header, List<TransferDeliveryDetailModel> details, UIMode mode)
        {
            var list = new List<Button>();

            if (mode == UIMode.Detail)
            {
                var print = new Button();
                print.Text = "Print Surat Jalan";
                print.CssClass = "button";
                print.ID = "btnPrint";
                print.OnClick = "if (confirm('Are you sure you want to print this document?')) { " + String.Format("window.open('{0}');", Url.Action("PopUp", "ReportViewer",
                    new { type = ReportViewerController.PrintOutType.TransferDelivery, queryString = SystemConstants.str_TransferDeliveryID + "=" + header.ID })) + " } ";
                print.Href = "#";
                list.Add(print); //TODO: reimplement printing

            }

            return list;
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            SetViewBagPermission();
            return base.Index(startIndex, amount, sortParameter, filter);
        }

        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var deliveryOrder = new TransferDeliveryBFC().RetrieveByID(key);

                ViewBag.VoidFromIndex = voidFromIndex;

                return View(deliveryOrder);
            }

            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(TransferDeliveryModel transferDelivery, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);

            try
            {
                var header = new TransferDeliveryBFC().RetrieveByID(transferDelivery.ID);
                DeliveryOrderStatus OldStatus = (DeliveryOrderStatus)header.Status;
                DeliveryOrderStatus NewStatus = (int)DeliveryOrderStatus.Void;

                new TransferDeliveryBFC().ImplementStatus(header.ID, MembershipHelper.GetUserName(), OldStatus, NewStatus);

                new TransferDeliveryBFC().Void(transferDelivery.ID, transferDelivery.VoidRemarks, MembershipHelper.GetUserName());

                //new EmailHelper().SendVoidDOEmail(transferDelivery.ID, transferDelivery.VoidRemarks, MembershipHelper.GetUserName());

                TempData["SuccessNotification"] = "Dokumen berhasil dibatalkan";

                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = transferDelivery.ID });
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = transferDelivery.ID, errorMessage = ex.Message });
            }

        }
    }
}
