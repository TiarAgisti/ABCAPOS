using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ABCAPOS.Models;
using MPL.MVC;
using ABCAPOS.BF;
using ABCAPOS.DA;
using ABCAPOS.Util;
using ABCAPOS.Helpers;

namespace ABCAPOS.Controllers
{
    public class TransferOrderController : MasterDetailController<TransferOrderModel, TransferOrderDetailModel>
    {
        private void AssignItemNo(TransferOrderModel header, List<TransferOrderDetailModel> details)
        {
            int maxItemNo = details.Max(p => p.ItemNo);

            foreach (TransferOrderDetailModel detail in details)
            {
                if (detail.ItemNo == 0)
                {
                    detail.ItemNo = maxItemNo + 1;
                    maxItemNo++;
                }
            }
        }

        private string ModuleID
        {
            get
            {
                return "TransferOrder";
            }
        }

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);

            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
            ViewBag.AllowVoid = roleDetails.Contains("Void");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMessage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetPreCreateViewBag(TransferOrderModel header)
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
            ViewBag.StaffList = new StaffBFC().Retrieve(true);
            ViewBag.ConversionList = new ProductBFC().RetrieveAllUnits();

        }

        private void SetPreEditViewBag(TransferOrderModel header)
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
            ViewBag.StaffList = new StaffBFC().Retrieve(true);
            ViewBag.ConversionList = new ProductBFC().RetrieveAllUnits();
        }

        private void SetPreDetailViewBag()
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
            ViewBag.DepartmentList = new DepartmentBFC().Retrieve(true);
        }

        public override MPL.Business.IMasterDetailBFC<TransferOrderModel, TransferOrderDetailModel> GetBFC()
        {
            return new TransferOrderBFC();
        }

        protected override List<Button> GetAdditionalButtons(TransferOrderModel header, List<TransferOrderDetailModel> details, UIMode mode)
        {
            var list = new List<Button>();

            if (mode == UIMode.Detail && header.Status >= (int)TransferOrderStatus.PendingFulfillment)
            {
                var print = new Button();
                print.Text = "Print Picking Ticket";
                print.CssClass = "button";
                print.ID = "btnPrint";
                // TODO: fix ReportViewerController.PrintOutType
                print.OnClick = String.Format("window.open('{0}');", Url.Action("PopUp", "ReportViewer",
                    new { type = ReportViewerController.PrintOutType.TransferPickingTicket, queryString = SystemConstants.str_TransferOrderID + "=" + header.ID }));
                print.Href = "#";
                list.Add(print);

            }

            return list;
        }

        protected override void PreCreateDisplay(TransferOrderModel header, List<TransferOrderDetailModel> details)
        {
            SetPreCreateViewBag(header);

            var transferOrderID = Request.QueryString["transferOrderID"];

            if (!string.IsNullOrEmpty(transferOrderID))
                new TransferOrderBFC().CopyTransaction(header, Convert.ToInt64(transferOrderID));

            header.Code = SystemConstants.autoGenerated; //new TransferOrderBFC().GetTransferOrderCode();

            base.PreCreateDisplay(header, details);
        }

        protected override void PreDetailDisplay(TransferOrderModel header, List<TransferOrderDetailModel> details)
        {
            SetPreDetailViewBag();

            SetViewBagNotification();

            SetViewBagPermission();
            foreach (var detail in details)
            {
                var unitRate = new ProductBFC().GetUnitRate(detail.ConversionID);
                detail.StockQty = detail.StockQty / unitRate;
                detail.QtyAvailable = detail.QtyAvailable / unitRate;
            }
            ViewBag.toDeliveryList = new TransferDeliveryBFC().RetrieveByTransferOrderID(header.ID);
            ViewBag.toReceiptList = new TransferReceiptBFC().RetrieveByTransferOrderID(header.ID);
            base.PreDetailDisplay(header, details);
        }

        protected override void PreUpdateDisplay(TransferOrderModel header, List<TransferOrderDetailModel> details)
        {
            SetPreEditViewBag(header);

            base.PreUpdateDisplay(header, details);
        }

        public override void CreateData(TransferOrderModel obj, List<TransferOrderDetailModel> details)
        {
            var status = obj.Status;
            try
            {
                obj.Code = new TransferOrderBFC().GetTransferOrderCode(obj);
                new TransferOrderBFC().Validate(obj, details);
                AssignItemNo(obj, details);
                base.CreateData(obj, details);
                if (status == (int)TransferOrderStatus.PendingFulfillment)
                {
                    ApproveData(obj.ID.ToString());
                }

                TempData["SuccessNotification"] = "Document has been saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override void UpdateData(TransferOrderModel obj, List<TransferOrderDetailModel> details, FormCollection formCollection)
        {
            try
            {
                var bfc = new TransferOrderBFC();
                bfc.Validate(obj, details);
                AssignItemNo(obj, details);

                var oldStatus = bfc.RetrieveByID(obj.ID).Status;
                if (oldStatus == (int)TransferOrderStatus.PendingFulfillment)
                    bfc.UndoQuantities(obj.ID);
                base.UpdateData(obj, details, formCollection);
                if (obj.Status == (int)TransferOrderStatus.PendingFulfillment)
                    ApproveData(obj.ID.ToString());

                TempData["SuccessNotification"] = "Document has been saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            SetViewBagPermission();
            var Count = 0;
            var List = new List<TransferOrderModel>();

            if (startIndex == null)
                startIndex = 0;

            if (amount == null)
                amount = 20;

            if (string.IsNullOrEmpty(sortParameter))
                sortParameter = "";

            Count = new TransferOrderBFC().RetrieveTransferOrderCount(filter.GetSelectFilters());
            List = new TransferOrderBFC().RetrieveTransferOrder((int)startIndex, (int)amount, sortParameter, filter.GetSelectFilters());

            ViewBag.DataCount = Count;
            ViewBag.PageSize = amount;
            ViewBag.StartIndex = startIndex;
            ViewBag.FilterFields = filter.FilterFields;

            return View(List);
            return base.Index(startIndex, amount, sortParameter, filter);
        }

        public ActionResult ApproveFromIndex(string key)
        {
            try
            {
                ApproveData(key);

                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }

        public override void ApproveData(string key)
        {
            try
            {
                new TransferOrderBFC().Approve(Convert.ToInt64(key), MembershipHelper.GetUserName());
                TempData["SuccessNotification"] = "Document has been approved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                throw;
            }
        }

        public ActionResult VoidFromIndex(string key)
        {
            base.VoidData(key);

            return RedirectToAction("Index");
        }

        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var transferOrder = new TransferOrderBFC().RetrieveByID(key);

                ViewBag.VoidFromIndex = voidFromIndex;

                return View(transferOrder);
            }

            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(TransferOrderModel transferOrder, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);

            try
            {
                new TransferOrderBFC().Void(transferOrder.ID, transferOrder.VoidRemarks, MembershipHelper.GetUserName());

                // TODO: fix EmailHelper to use TransferOrder Email
                //new EmailHelper().SendVoidPurchaseOrderEmail(transferOrder.ID, transferOrder.VoidRemarks, MembershipHelper.GetUserName());

                TempData["SuccessNotification"] = "Document has been canceled";

                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = transferOrder.ID });
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = transferOrder.ID, errorMessage = ex.Message });
            }

        }
    }
}
