using ABCAPOS.BF;
using ABCAPOS.Models;
using ABCAPOS.Util;
using MPL.MVC;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace ABCAPOS.Controllers
{
    public class BookingOrderController : MasterDetailController<BookingOrderModel, BookingOrderDetailModel>
    {
        private void AssignItemNo(BookingOrderModel header, List<BookingOrderDetailModel> details)
        {
            int maxItemNo = details.Max(p => p.ItemNo);

            foreach (BookingOrderDetailModel detail in details)
            {
                if (detail.ItemNo == 0)
                {
                    detail.ItemNo = maxItemNo + 1;
                    maxItemNo++;
                }
            }
        }

        private string ModuleID
        {
            get
            {
                return "BookingOrder";
            }
        }

        public override MPL.Business.IMasterDetailBFC<BookingOrderModel, BookingOrderDetailModel> GetBFC()
        {
            return new BookingOrderBFC();
        }

        public override ActionResult Index(int? startIndex, int? amount, string sortParameter, MPL.MVC.GenericFilter filter)
        {
            SetViewBagPermission();
            SetIndexViewBag();

            if (startIndex == null)
                startIndex = 0;

            if (amount == null)
                amount = 20;

            if (string.IsNullOrEmpty(sortParameter))
                sortParameter = "";

            var bookingOrderCount = new BookingOrderBFC().RetrieveCount(filter.GetSelectFilters(), false);
            var bookingOrderList = new BookingOrderBFC().Retrieve((int)startIndex, (int)amount, sortParameter, filter.GetSelectFilters(), false);

            ResetBackToListUrl(filter);

            ViewBag.DataCount = bookingOrderCount;
            ViewBag.PageSize = amount;
            ViewBag.StartIndex = startIndex;
            ViewBag.FilterFields = filter.FilterFields;
            ViewBag.PageSeriesSize = GetPageSeriesSize();

            return View(bookingOrderList);
        }

        #region SetViewBag

        private void SetViewBagPermission()
        {
            var roleDetails = new RoleBFC().RetrieveActions(MembershipHelper.GetRoleID(), ModuleID);
            ViewBag.AllowEdit = roleDetails.Contains("Edit");
            ViewBag.AllowCreate = roleDetails.Contains("Create");
            ViewBag.AllowVoid = roleDetails.Contains("Void");
        }

        private void SetViewBagNotification()
        {
            if (TempData["SuccessNotification"] != null)
                ViewBag.SuccessNotification = Convert.ToString(TempData["SuccessNotification"]);

            if (!string.IsNullOrEmpty(Request.QueryString["errorMessage"]))
                ViewBag.ErrorNotification = Convert.ToString(Request.QueryString["errorMessage"]);
        }

        private void SetIndexViewBag()
        {
            ViewBag.WarehouseList = new WarehouseBFC().RetrieveAll();
        }

        public void SetPreDetailViewBag()
        {
            ViewBag.WarehouseList = new WarehouseBFC().Retrieve(true);
        }

        protected void SetPreEditDetailViewBag(BookingOrderModel header, List<BookingOrderDetailModel> details)
        {
            foreach (var detail in details)
            {
                detail.ConversionIDTemp = detail.ConversionID;
            }
        }

        #endregion 

        #region Pre-Display

        protected override void PreCreateDisplay(BookingOrderModel header, List<BookingOrderDetailModel> details)
        {
            SetPreDetailViewBag();

            if (ViewBag.ErrorNotification != null)
            {
                new BookingOrderBFC().ErrorTransaction(header, details);
                //ViewBag.ErrorNotification = null;
            }

            header.Code = SystemConstants.autoGenerated;
            header.WarehouseID = new StaffBFC().RetrieveDefaultWarehouseID(MembershipHelper.GetUserName());
        
            base.PreCreateDisplay(header, details);
        }

        protected override void PreUpdateDisplay(BookingOrderModel header, List<BookingOrderDetailModel> details)
        {
            SetViewBagNotification();
            SetPreDetailViewBag();
            SetPreEditDetailViewBag(header, details);

            base.PreUpdateDisplay(header, details);
        }

        protected override void PreDetailDisplay(BookingOrderModel header, List<BookingOrderDetailModel> details)
        {
            SetPreDetailViewBag();
            SetViewBagPermission();
            SetViewBagNotification();

            ViewBag.poList = new PurchaseOrderBFC().RetrieveByBOID(header.ID);
            ViewBag.poDeliveryList = new PurchaseDeliveryBFC().RetrieveByBOID(header.ID);
            ViewBag.poBillList = new PurchaseBillBFC().RetrieveByBOID(header.ID);

            base.PreDetailDisplay(header, details);
        }

        #endregion 

        #region Create Update Booking

        public override void CreateData(BookingOrderModel obj, List<BookingOrderDetailModel> details)
        {
            try
            {
                new BookingOrderBFC().Validate(obj, details);
                AssignItemNo(obj, details);
                //obj.CurrencyID = 2;
                base.CreateData(obj, details);

                TempData["SuccessNotification"] = "Document has been saved";
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;

                throw;
            }
        }


        [HttpPost, ValidateInput(false)]
        public ActionResult UpdateBookingOrder(BookingOrderModel obj, FormCollection col)
        {
            try
            {
                new BookingOrderBFC().Validate(obj, obj.Details);
                new BookingOrderBFC().UpdateValidation(obj, obj.Details);
                AssignItemNo(obj, obj.Details);
                base.Update(obj, col);

                return RedirectToAction("Detail", new { key = obj.ID });
            }
            catch (Exception ex)
            {
                ViewBag.ErrorNotification = ex.Message;
                ViewBag.Mode = UIMode.Update;
                SetViewBagPermission();

                return RedirectToAction("Update", new { key = obj.ID, errorMessage = ex.Message });
            }
        }

        #endregion 

        #region Void

        public ActionResult VoidFromIndex(string key)
        {
            base.VoidData(key);

            return RedirectToAction("Index");
        }

        public ActionResult VoidRemarks(string key, bool voidFromIndex)
        {
            if (!string.IsNullOrEmpty(key))
            {
                var bookingOrder = new BookingOrderBFC().RetrieveByID(key);

                ViewBag.VoidFromIndex = voidFromIndex;

                return View(bookingOrder);
            }

            return View();
        }

        [HttpPost]
        public ActionResult VoidRemarks(BookingOrderModel bookingOrder, FormCollection col)
        {
            var voidFromIndex = Convert.ToBoolean(col["hdnVoidFromIndex"]);

            try
            {
                new BookingOrderBFC().Void(bookingOrder.ID, bookingOrder.VoidRemarks, MembershipHelper.GetUserName());

                TempData["SuccessNotification"] = "Document has been canceled";

                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = bookingOrder.ID });
            }
            catch (Exception ex)
            {
                if (voidFromIndex)
                    return RedirectToAction("Index");
                else
                    return RedirectToAction("Detail", new { key = bookingOrder.ID, errorMessage = ex.Message });
            }

        }

        #endregion
    }
}
