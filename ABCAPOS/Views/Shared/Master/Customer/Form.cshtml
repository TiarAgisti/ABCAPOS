@using MPL.MVC;
@using ABCAPOS.Models;
@using ABCAPOS.Util;
@model CustomerModel
@{
    var mode = (UIMode)ViewBag.Mode;

    var yesNoRadioOption = new List<RadioOption>()
    {
        new RadioOption(){Value = true, Text = "YES", ReadOnly = mode ==UIMode.Detail},
        new RadioOption(){Value = false, Text = "NO", ReadOnly= mode ==UIMode.Detail}
    };

    var RadioOptionBlackList = new List<RadioOption>()
    {
        new RadioOption(){Value = true,Text ="YES", ReadOnly = mode == UIMode.Detail},
        new RadioOption(){Value = false, Text="NO",ReadOnly = mode == UIMode.Detail},
    };

    var IsCoverExpeditionRadioOption = new List<RadioOption>()
    {
        new RadioOption(){Value = true,Text ="YES", ReadOnly = mode == UIMode.Detail},
        new RadioOption(){Value = false, Text="NO",ReadOnly = mode == UIMode.Detail},
    };

    var IsActiveRadioButton = new List<RadioOption>()
    {
        new RadioOption(){Value = true, Text = "Active", ReadOnly = mode ==UIMode.Detail},
        new RadioOption(){Value = false, Text = "Inactive", ReadOnly= mode ==UIMode.Detail}
    };

    var termList = ViewBag.TermList as IEnumerable<TermsOfPaymentModel>;
    var ddlTerms = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)0), Text ="" }
    };
    ddlTerms.AddRange(Util.GetDropDownOptions(termList, "Name", "ID"));

    var ddlCategory = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)CustomerCategory.Individual), Text ="INDIVIDUAL" },
        new DropDownOption(){ Value = Convert.ToString((int)CustomerCategory.Agent), Text ="AGENT" },
        new DropDownOption(){ Value = Convert.ToString((int)CustomerCategory.Industry), Text ="INDUSTRIAL" },
    };

    var priceLevelList = ViewBag.PriceLevelList as IEnumerable<PriceLevelModel>;
    var ddlPriceLevels = Util.GetDropDownOptions(priceLevelList, "Description", "ID");

    var warehouseList = ViewBag.WarehouseList as List<WarehouseModel>;
    var ddlWarehouse = Util.GetDropDownOptions(warehouseList, "Name", "ID");

    var formFields = new List<IFormField>()
    {
        //Primary Info
        Html.HiddenFieldFieldObjFor(p=>p.ID,""),
        Html.HiddenFieldFieldObjFor(p=>p.ParentID,""),
        Html.HiddenFieldFieldObjFor(p=>p.SalesRep,""),
        
        Html.TextBoxFieldObjFor(p=>p.Code,"CUSTOMER ID", delegate(FormField f){
            f.Style = "width:400px";
            //f.UpdateFieldType = FormFieldType.Label;
            //f.GenerateHiddenField = true;
        }),
        Html.TextBoxFieldObjFor(p=>p.ParentName,"PARENT CUST", delegate(FormField f){
                f.Style = "width:300px";
            }),
        Html.TextBoxFieldObjFor(p=>p.Name,"NAME", delegate(FormField f){
            f.Style = "width:400px";
        }),
        Html.TextBoxFieldObjFor(p=>p.CompanyName,"COMPANY NAME", delegate(FormField f){
            f.Style = "width:400px";
        }),
        
        Html.TextBoxFieldObjFor(p=>p.Status, "STATUS", delegate (FormField f){
            f.Style = "width:400px";
        }),
        
        Html.DropDownFieldObjFor(p=>p.WarehouseID, "LOCATION", ddlWarehouse,delegate(FormField f){
            f.Style = "width:300px";
        }),
        Html.LabelFieldObjFor(p=>p.WarehouseName, "LOCATION", delegate (FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),        
        
        Html.DropDownFieldObjFor(p=>p.Category, "CATEGORY", ddlCategory),
        Html.LabelFieldObjFor(p=>p.CategoryName,"CATEGORY",delegate(FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        
        Html.TextBoxFieldObjFor(p=>p.Territory, "TERRITORY"),
        Html.TextBoxFieldObjFor(p=>p.Comments, "COMMENTS"),
        
        // Primary address and contact numbers
        Html.TextAreaFieldObjFor(p=>p.Address,"ADDRESS", delegate(FormField f){
            f.Style = "width:400px";
        }),
        Html.TextBoxFieldObjFor(p=>p.City,"CITY"),
        Html.TextBoxFieldObjFor(p=>p.Province, "PROVINCE"),
        Html.TextBoxFieldObjFor(p=>p.Zip, "ZIP"),
        Html.TextBoxFieldObjFor(p=>p.Phone,"PHONE"),
        Html.TextBoxFieldObjFor(p=>p.Fax,"FAX"),
        
        //Additional Addresses 
        Html.TextAreaFieldObjFor(p=>p.BillingAddress1,"BILLING ADDRESS 1", delegate(FormField f){
            f.Style = "width:400px";
        }),
        Html.TextAreaFieldObjFor(p=>p.BillingAddress2,"BILLING ADDRESS 2", delegate(FormField f){
            f.Style = "width:400px";
        }),
        Html.TextAreaFieldObjFor(p=>p.ShippingAddress,"SHIPPING ADDRESS", delegate(FormField f){
            f.Style = "width:400px";
        }),
        
        //Contact Info
        Html.TextBoxFieldObjFor(p=>p.ContactPerson,"CONTACT PERSON"),
        Html.TextBoxFieldObjFor(p=>p.SalesRepName,"SALES REP"),
        Html.TextBoxFieldObjFor(p=>p.LeadSource,"LEAD SOURCE"),
        Html.TextBoxFieldObjFor(p=>p.Partner,"PARTNER"),
        Html.TextBoxFieldObjFor(p=>p.AltContact,"ALT CONTACT"),
        Html.TextBoxFieldObjFor(p=>p.OfficePhone,"OFFICE PHONE"),
        
        //Financial
        Html.TextBoxFieldObjFor(p=>p.Account, "ACCOUNT"),
        Html.TextBoxFieldObjFor(p=>p.TaxFileNumber,"NPWP"),
        Html.TextBoxFieldObjFor(p=>p.ResaleNumber,"RESALE NUMBER"),
        
        Html.DropDownFieldObjFor(p=>p.TermsID, "TERMS", ddlTerms,delegate(FormField f){
            f.Style = "width:300px";
        }),
        Html.LabelFieldObjFor(p=>p.TermsName, "TERMS", delegate (FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),        
        
        Html.DropDownFieldObjFor(p=>p.PriceLevelID, "PRICE LEVEL", ddlPriceLevels,delegate(FormField f){
            f.Style = "width:300px";
        }),
        Html.LabelFieldObjFor(p=>p.PriceLevelName, "PRICE LEVEL", delegate (FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),        
        
        Html.LabelFieldObjFor(p=>p.InvoiceBalance, "BALANCE", delegate(FormField f){
            f.Style = "width:400px";
            f.CreateFormat = f.UpdateFormat = f.DetailFormat = "N2";
        }),
        
        Html.TextAreaFieldObjFor(p=>p.Notes, "NOTES", delegate(FormField f){
            f.Style = "width:400px";
        }),
        
        Html.DecimalFieldObjFor(p=>p.CreditLimit, "CREDIT LIMIT", delegate(FormField f){
            f.Style = "width:400px";
        }),
        //Html.LabelFieldObjFor(p=>p.OverdueBalance, "OVERDUE BALANCE", delegate(FormField f){
        //    f.Style = "width:400px";
        //    f.CreateFormat = f.UpdateFormat = f.DetailFormat = "N2";
        //}),
        //Html.LabelFieldObjFor(p=>p.DaysOverdue, "DAYS OVERDUE", delegate(FormField f){
        //    f.Style = "width:400px";
        //    f.CreateFormat = f.UpdateFormat = f.DetailFormat = "N2";
        //}),
        Html.RadioButtonFieldObjFor(p=>p.OnCreditHold, "ON CREDIT HOLD", yesNoRadioOption, delegate(FormField f){
            f.DetailFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.OnCreditHoldDescription, "ON CREDIT HOLD", delegate(FormField f){
            f.Style = "width:400px";
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        
        Html.RadioButtonFieldObjFor(p=>p.BlackList,"BLACK LIST",RadioOptionBlackList,delegate(FormField f){
            f.DetailFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.BlackListDescription,"BLACK LIST",delegate(FormField f){
            f.Style = "width:400px";
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        Html.RadioButtonFieldObjFor(p=>p.IsActive, "Status IsActive", IsActiveRadioButton,delegate(FormField f){
            f.DetailFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.IsActiveDescription, "Status IsActive", delegate(FormField f){
            f.Style = "width:400px";
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        Html.RadioButtonFieldObjFor(p=>p.IsCoverExpeditionByABCA, "Cover Expedition By ABCA", IsCoverExpeditionRadioOption,delegate(FormField f){
            f.DetailFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.IsCoverExpeditionDesc, "Cover Expedition By ABCA", delegate(FormField f){
            f.Style = "width:400px";
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        //Html.RadioButtonFieldObjFor(p=>p.OverrideCreditHold, "OVERRIDE CREDIT HOLD", yesNoRadioOption)
        //Html.RadioButtonFieldObjFor(p=>p.IsActive,"Status IsActive", IsActiveRadioButton),
    };

    /* subtab sales order */
    var soGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ID","SO ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        
        Html.DateColumn("Date","DATE", "180px"),
        Html.LabelColumn("Code", "SO CODE", "280px"),
        Html.DecimalColumn("SubTotal", "SUB TOTAL", "280px"),
        Html.DecimalColumn("TaxValue", "TAX", "280px"),
        Html.DecimalColumn("GrandTotal", "GRAND TOTAL", "280px"),
    };
    var soGrid = new Grid();
    soGrid.ID = "soGrid";
    soGrid.DataContainerName = "soDetails";
    soGrid.IncludeAddRowScript = false;
    soGrid.IncludeDeleteRowButton = false;
    soGrid.Columns = soGridColumns;
    soGrid.ShowFooter = false;
    soGrid.AllowSorting = false;
    /* end subtab sales order */

    /* subtab  deliveryorder */
    var doGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ID","DO ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        
        Html.DateColumn("Date","DATE", "180px"),
        Html.LabelColumn("Code", "SJ NO", ""),
        Html.LabelColumn("StatusDescription","STATUS",""),
    };
    var doGrid = new Grid();
    doGrid.ID = "doGrid";
    doGrid.DataContainerName = "doDetails";
    doGrid.IncludeAddRowScript = false;
    doGrid.IncludeDeleteRowButton = false;
    doGrid.Columns = doGridColumns;
    doGrid.ShowFooter = false;
    doGrid.AllowSorting = false;
    /* end subtab deliveryorder */

    /* subtab  invoice */
    var invGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ID","DO ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        
        Html.DateColumn("Date","DATE", "180px"),
        Html.LabelColumn("Code", "INV NO", ""),
        Html.DecimalColumn("Amount", "SUB TOTAL", "200px"),
        Html.DecimalColumn("TaxAmount", "TAX", "200px"),
        Html.DecimalColumn("GrandTotal", "GRAND TOTAL", "200px"),
        Html.LabelColumn("StatusDesc", "STATUS", ""),
    };
    var invGrid = new Grid();
    invGrid.ID = "invGrid";
    invGrid.DataContainerName = "invDetails";
    invGrid.IncludeAddRowScript = false;
    invGrid.IncludeDeleteRowButton = false;
    invGrid.Columns = invGridColumns;
    invGrid.ShowFooter = false;
    invGrid.AllowSorting = false;
    /* end subtab invoice */

    /* subtab  invoice payment */
    var invPayGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ID","DO ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        
        Html.DateColumn("Date","DATE", "180px"),
        Html.LabelColumn("Code", "PAYMENT NO", ""),
        Html.LabelColumn("PaymentMethodInvoiceDesc", "PAYEMENT METHOD", "200px"),
        Html.LabelColumn("CheckNo", "GIRO NO", "200px"),
        Html.DecimalColumn("TotalPayment", "AMOUNT PAID", "200px"),
    };
    var invpayGrid = new Grid();
    invpayGrid.ID = "invpayGrid";
    invpayGrid.DataContainerName = "invpayDetails";
    invpayGrid.IncludeAddRowScript = false;
    invpayGrid.IncludeDeleteRowButton = false;
    invpayGrid.Columns = invPayGridColumns;
    invpayGrid.ShowFooter = false;
    invpayGrid.AllowSorting = false;
    /* end subtab invoice payment*/

    TabbedGrid tabbedGrid = new TabbedGrid();
    if (mode == UIMode.Detail)
    {
        tabbedGrid.AddGrid("Sales Order", soGrid, ViewBag.SalesOrder);
        tabbedGrid.AddGrid("DeliveryOrder", doGrid, ViewBag.DeliveryOrder);
        tabbedGrid.AddGrid("Invoice", invGrid, ViewBag.Invoice);
        tabbedGrid.AddGrid("Accept Payment", invpayGrid, ViewBag.InvPayment);
    }

    var form = new Form();
    form.Fields = formFields;

}
<script type="text/javascript">
    function onSelectCustomer(data) {
        $("#hdnParentID").val(data.ID);
        $("#txtParentName").val(data.Name);
    }

    function onSelectStaff(data) {
        $("#hdnSalesRep").val(data.ID);
        $("#txtSalesRepName").val(data.Name);
    }

    $(function () {
        $("#tabs").tabs();
    });
</script>
@Html.AutoCompleteScript("initCustomerAutoComplete", "txtParentName", Url.Content("~/WebService.asmx/RetrieveCustomerByKey"), "",
                Url.Content("~/WebService.asmx/RetrieveCustomer"), "customerName", "Code", "Name", "onSelectCustomer", 50, 500)
@Html.AutoCompleteScript("initStaffAutoComplete", "txtSalesRepName", Url.Content("~/WebService.asmx/RetrieveStaffByKey"), "",
                Url.Content("~/WebService.asmx/RetrieveStaff"), "staffID", "ID", "Name", "onSelectStaff", 50, 500)
@Html.MasterForm(form, Model, mode, "Customer", "ID", delegate(MasterFormHelper<CustomerModel> helper)
{
    //helper.TabbedGrid = tabbedGrid;
    if (mode == UIMode.Detail)
    {
        if (!Convert.ToBoolean(ViewBag.AllowCreate))
        {
            helper.CreateAnotherButton.Visible = false;
        }

        if (!Convert.ToBoolean(ViewBag.AllowEdit))
        {
            helper.EditButton.Visible = false;
        }

        helper.DeleteButton.Visible = false;
    }
})
<br />
<br />
@if (mode == UIMode.Detail)
{
    @tabbedGrid.Render(Request, mode);
}
