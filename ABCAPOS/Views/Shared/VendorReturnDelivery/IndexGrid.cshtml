@using MPL.MVC;
@using ABCAPOS.Util;
@using ABCAPOS.Models;
@model List<VendorReturnDeliveryModel>
@{
    var dataCount = (int)ViewBag.DataCount;
    var pageSize = (int)ViewBag.PageSize;
    var startIndex = (int)ViewBag.StartIndex;
    var selectedPage = startIndex / pageSize + 1;
    var pageAmount = (dataCount / 20);

    if (dataCount % 20 != 0)
    {
        pageAmount += 1;
    }

    var statement = string.Format("Page: {0} of {1}", selectedPage, pageAmount);

    var gridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("VendorReturnID","Sales Order ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("VendorReturnTitle","Judul Sales Order","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("Code","SJ NO","180px"),
        Html.DateColumn("Date","DATE"),
        Html.LabelColumn("VendorReturnCode","REF SO","100px"),
        Html.LabelColumn("VendorName","VENDOR"),
        Html.LabelColumn("StatusDescription","STATUS", "100px",delegate(GridColumn col){
            col.SortField = "Status";
        })
    };

    var statusList = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)MPL.DocumentStatus.New), Text = MPL.DocumentStatus.New.ToString() },
        new DropDownOption(){ Value = Convert.ToString((int)MPL.DocumentStatus.Approved), Text = "Disetujui" },
        new DropDownOption(){ Value = Convert.ToString((int)MPL.DocumentStatus.Void), Text = MPL.DocumentStatus.Void.ToString() },
    };

    
    var filterList = new List<GenericFilterField>()
    {
        Html.GenericFilterDateRangeField("TRANSACTION DATE","TransactionDate"),
        Html.GenericFilterTextBoxField("SJ NO","Code"),
        Html.GenericFilterTextBoxField("REF SO","VendorReturnCode"),
        Html.GenericFilterTextBoxField("VENDOR","VendorName"),
        Html.GenericFilterDropDownField("STATUS","Status",statusList,typeof(int))
        
    };

    var detailButton = new GridButtonColumn();
    detailButton.CssClass = "iconContainer";
    detailButton.ButtonCssClass = "details imageButton";
    detailButton.Href = Url.Content("~/VendorReturnDelivery/Detail?key=@idPropertyValue");
    detailButton.IDPropertyName = "ID";
    detailButton.Text = "Detail";

    var approveButton = new GridButtonColumn();
    approveButton.CssClass = "iconContainer";
    approveButton.ButtonCssClass = "approve imageButton";
    approveButton.Href = Url.Content("~/VendorReturnDelivery/ApproveFromIndex?key=@idPropertyValue");
    approveButton.OnClick = "return confirm('Are you sure you want to mark packed this document?');";
    approveButton.IDPropertyName = "ID";
    approveButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var vendorReturnDelivery = obj as VendorReturnDeliveryModel;

        if (vendorReturnDelivery.Status == (int)MPL.DocumentStatus.New && Convert.ToBoolean(ViewBag.AllowEdit))
            return true;

        return false;
    };
    approveButton.Text = "Setujui";

    //var printButton = new GridButtonColumn();
    //printButton.CssClass = "iconContainer";
    //printButton.ButtonCssClass = "print imageButton";
    ////printButton.OnClick = "if (confirm('Are you sure you want to print this document?')) { " + String.Format("window.open('{0}');", Url.Action("PopUp", "ReportViewer", new { type = ABCAPOS.Controllers.ReportViewerController.PrintOutType.VendorReturnDelivery, queryString = "vendorReturnDeliveryID=@idPropertyValue" })) + " } ";
    //printButton.IDPropertyName = "ID";
    //printButton.Text = "Cetak";

    var voidButton = new GridButtonColumn();
    voidButton.CssClass = "iconContainer";
    voidButton.ButtonCssClass = "cancel imageButton";
    voidButton.Href = Url.Content("~/VendorReturnDelivery/VoidFromIndex?key=@idPropertyValue");
    voidButton.OnClick = "return confirm('Apakah Anda yakin ingin membatalkan dokumen ini?');";
    voidButton.IDPropertyName = "ID";
    voidButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var vendorReturnDelivery = obj as VendorReturnDeliveryModel;

        if (vendorReturnDelivery.Status != (int)DeliveryOrderStatus.Void)
            return true;

        return false;
    };
    voidButton.Text = "Void";

    var grid = new Grid();
    grid.Columns = gridColumns;
    grid.Buttons.Add(detailButton);
    //grid.Buttons.Add(approveButton);
    //grid.Buttons.Add(printButton);

    if (Convert.ToBoolean(ViewBag.AllowVoid))
    {
        grid.Buttons.Add(voidButton);
    }
}
<script type="text/javascript">
    $(function () {
        addTooltip();
        if ($.urlParam('filter.FilterFields%5B0%5D.Selected') == null) {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            today = mm + '/' + dd + '/' + yyyy;
            $("#filter_FilterFields_0_Value").val(today);
        }
    });
    $(document).ready(function () {
        window.initDatePicker = function () {
            $("input.datepicker").datepicker({
                dateFormat: 'mm/dd/yy', showOn: 'both', buttonImage: '/Content/Icons/calendar.png',
                buttonImageOnly: true
            });
            $('img.ui-datepicker-trigger').css({ 'margin-left': '2px' });
        }
    });
    function addTooltip() {
        var noOfRows = $("#Grid1 tbody tr").length;

        for (x = 0; x < noOfRows; x++) {
            var vendorReturnID = $("#Details_" + x + "_VendorReturnID").val();
            var vendorReturnCode = $("#Details_" + x + "_VendorReturnCode").text();
            var vendorReturnTitle = $("#Details_" + x + "_VendorReturnTitle").val();

            var vendorReturnLink = "/VendorReturn/Detail?key=" + vendorReturnID;

            $("#Details_" + x + "_VendorReturnCode").replaceWith('<a href="' + vendorReturnLink + '" title="' + vendorReturnTitle + '">' + vendorReturnCode + '</a>');
        }
    }
</script>
@Html.GenericFilter(filterList)
@Html.IndexGrid(grid, Model, "VendorReturnDelivery", "ID", "Code", null, delegate(object obj, UIMode mode)
{
    return false;
}, delegate(IndexGridHelper helper)
    {
        if (Convert.ToBoolean(ViewBag.AllowCreate))
        {
            helper.AddNewButton.Visible = true;
        }
        else
        {
            helper.AddNewButton.Visible = false;
        }

        helper.AddNewButton.Href = Url.Content("~/UncreatedVendorReturnDelivery/");
    })
<br />
@statement