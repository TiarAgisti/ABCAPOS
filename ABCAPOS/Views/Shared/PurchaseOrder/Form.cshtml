@using MPL.MVC;
@using ABCAPOS.Models;
@using ABCAPOS.Util;
@model PurchaseOrderModel
@{
    var mode = (UIMode)ViewBag.Mode;
    ViewBag.ErrorMessage = "";

    var action = "";

    if (mode == UIMode.Create)
    {
        action = "Create";
    }
    else
    {
        action = "UpdatePurchaseOrder";
    }

    var warehouseList = ViewBag.WarehouseList as IEnumerable<WarehouseModel>;
    var ddlWarehouse = Util.GetDropDownOptions(warehouseList, "Name", "ID");

    var currencyList = ViewBag.CurrencyList as IEnumerable<CurrencyModel>;
    var ddlCurrency = Util.GetDropDownOptions(currencyList, "Name", "ID");

    var departmentList = ViewBag.DepartmentList as IEnumerable<DepartmentModel>;
    var ddlDepartment = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)0), Text ="" }
    };
    ddlDepartment.AddRange(Util.GetDropDownOptions(departmentList, "DepartmentDesc", "ID"));

    var staffList = ViewBag.StaffList as IEnumerable<StaffModel>;
    var ddlStaff = Util.GetDropDownOptions(staffList, "Name", "ID");

    var ddlConversion = new List<DropDownOption>();

    var ddlTax = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)TaxType.PPN), Text = "PPN" },
        new DropDownOption(){ Value = Convert.ToString((int)TaxType.NonTax), Text ="Non-PPN" }
        
    };

    var currencyFormField = new MPL.MVC.FormField[]{
        Html.DropDownFieldObjFor(p=>p.CurrencyID,"CURRENCY",ddlCurrency, delegate(FormField f){
            f.Style = "width:300px";
            f.DetailFieldType = FormFieldType.None;
            f.Attributes = "onchange=\"changeCurrency();\"";
        }),
        Html.LabelFieldObjFor(p=>p.CurrencyName,"CURRENCY", delegate(FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        })
    };

    var kursFormField = new MPL.MVC.FormField[]{
        Html.DecimalFieldObjFor(p=>p.ExchangeRate,"Kurs / Rate", delegate(FormField f){
            f.DetailFormat = f.CreateFormat = f.UpdateFormat = "G";
        })   
    };

    var formFields2 = new MPL.MVC.FormField[]{
        Html.DropDownFieldObjFor(p=>p.WarehouseID,"LOCATION",ddlWarehouse, delegate(FormField f){
            f.Style = "width:300px";
            //f.Attributes = " onchange=\"onchangeLocation()\" ";
            f.DetailFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.WarehouseName,"LOCATION", delegate(FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
    };

    var formFields3 = new MPL.MVC.FormField[]
    {
        Html.TextBoxFieldObjFor(p=>p.EmployeeName,"EMPLOYEE", delegate(FormField f){
            f.Style = "width:300px";
        })
    };

    var formFields4 = new MPL.MVC.FormField[] {
        Html.DropDownFieldObjFor(p=>p.DepartmentID,"DEPARTMENT",ddlDepartment, delegate(FormField f){
            f.Style = "width:300px";
        }),
        Html.LabelFieldObjFor(p=>p.DepartmentName,"DEPARTMENT", delegate(FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        
    };

    var formFields5 = new MPL.MVC.FormField[] {
        Html.TextAreaFieldObjFor(p=>p.Remarks, "Notes", delegate(FormField f){
            f.Style = "width:300px";
        }),
    };

    var yesNoRadio = new List<RadioOption>()
    {
        new RadioOption(){ Value = true,Text = "Ya", ReadOnly = mode == UIMode.Detail},
        new RadioOption(){ Value = false,Text = "Tidak", ReadOnly = mode == UIMode.Detail},
    };

    var formFields = new List<IFormField>()
    {
        Html.HiddenFieldFieldObjFor(p=>p.ID,""),
        Html.HiddenFieldFieldObjFor(p=>p.EmployeeID,""),
        Html.HiddenFieldFieldObjFor(p=>p.SupplierID,""),
        Html.HiddenFieldFieldObjFor(p=>p.BookingOrderID, ""),
        Html.HiddenFieldFieldObjFor(p=>p.Status,""),
        //Html.HiddenFieldFieldObjFor(p=>p.ConversionValue, ""),
        
        Html.LabelFieldObjFor(p=>p.BookingOrderID,"BookingOrder ID", delegate(FormField f){
            f.DetailFieldType = FormFieldType.HiddenField;
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        
        Html.FullRowFormFieldObj("<br /><b>Primary Information</b><br/>","<br /><b>Primary Information</b><br/>","<br /><b>Primary Information</b><br/>"),
        Html.LabelFieldObjFor(p=>p.BookingOrderCode,"REF BOOKING", delegate(FormField f){
            f.UpdateFieldType = FormFieldType.Label;
            f.Style = "width:300px";
        }),
        Html.DualColumnFormFieldObj(
            Html.LabelFieldObjFor(p=>p.Code,"PO NUMBER", delegate(FormField f){
                f.UpdateFieldType = FormFieldType.Label;
                f.GenerateHiddenField = true;
            }),
            Html.DateFieldObjFor(p=>p.Date,"TANGGAL", delegate(FormField f){
                f.DetailFormat = "MM/dd/yyyy";
                f.CreateFormat = f.UpdateFormat = "MM/dd/yyyy";
                f.Style = "width:300px";
            }), 20
        ),
        
        Html.DualColumnFormFieldObj(
            Html.TextBoxFieldObjFor(p=>p.VendorName,"VENDOR", delegate(FormField f){
                f.Style = "width:300px";
            }),
            Html.DateFieldObjFor(p=>p.DueDate,"JATUH TEMPO", delegate(FormField f){
                f.DetailFormat = "MM/dd/yyyy";
                f.CreateFormat = f.UpdateFormat = "MM/dd/yyyy";
                f.Style = "width:300px";
            }), 20
        ),
        
        Html.DualColumnFormFieldObj(
            currencyFormField,
            kursFormField, 20
        ),
        
        Html.DualColumnFormFieldObj(
            Html.TextBoxFieldObjFor(p=>p.Title,"MEMO", delegate(FormField f){
                f.Style = "width:300px";
            }),
            Html.RadioButtonFieldObjFor(p=>p.CopyCurrencyValueToMaster,"Ubah Kurs di Master?", yesNoRadio),
            20
        ),
            
        Html.FullRowFormFieldObj("<br />","<br />","<br />"),
        
        Html.FullRowFormFieldObj("<br /><b>Clasifications</b><br/>","<br /><b>Clasifications</b><br/>","<br /><b>Clasifications</b><br/>"),
        
        Html.DualColumnFormFieldObj(formFields2, formFields3, 20),
        
        Html.DualColumnFormFieldObj(formFields4, formFields5, 20),
        //Html.DecimalFieldObjFor("DiscountTotal","Discount (Rp)", delegate(FormField f){
        //}),
        Html.LabelFieldObjFor(p=>p.EmailTo,"EMAIL TO (separated by ';')", delegate(FormField f){
            f.Style = "width:800px";
        }),
        Html.DualColumnFormFieldObj(
            Html.LabelFieldObjFor(p=>p.StatusCreated,"CREATED BY", delegate(FormField f)
            {
                f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
            }),
        
            Html.LabelFieldObjFor(p=>p.StatusModified,"LAST MODIFIED BY", delegate(FormField f)
            {
                f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
            }),20
        ),
        
        Html.LabelFieldObjFor(p=>p.StatusDescription,"STATUS", delegate(FormField f)
        {
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        
        Html.LabelFieldObjFor(p=>p.VoidRemarks,"VOID REMARKS", delegate(FormField f)
        {
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
            
            if(string.IsNullOrEmpty(Model.VoidRemarks))
            {
                f.DetailFieldType = FormFieldType.None;
            }
        }),
    };

    var gridColumns = new List<GridColumn>()
    {
        Html.HiddenFieldColumn("ItemNo"),
        Html.HiddenFieldColumn("LineSequenceNumber"),
        Html.HiddenFieldColumn("ProductID"),
        //Html.HiddenFieldColumn("StockQtyHidden"),
        //Html.HiddenFieldColumn("StockAvailableHidden"),
        Html.HiddenFieldColumn("CreatedPDQuantity"),
        Html.HiddenFieldColumn("CreatedPBQuantity"),
        Html.HiddenFieldColumn("BookingOrderItemNo"),
        
        Html.LabelColumn("StockQtyHidden", "ON HAND", "100px",delegate(GridColumn col){
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("StockAvailableHidden", "AVAILABLE", "100px",delegate(GridColumn col){
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.HiddenField;
        }),
        //Html.HiddenFieldColumn("ConversionID","","",delegate(GridColumn col){
        //    col.CreateColumnType = col.UpdateColumnType = GridColumnType.None;
        //}),
        //Html.HiddenFieldColumn("ConversionIDTemp","","",delegate(GridColumn col){
        //    col.CreateColumnType = col.DetailColumnType = GridColumnType.None;
        //}),
        Html.TextBoxColumn("ProductCode","ITEM*","110px",delegate(GridColumn col){
            col.InitAutoCompleteFunctionName = "initProductAutoComplete";
        }),
        //Html.LabelColumn("VendorName", "VENDOR NAME","",delegate(GridColumn col){
        //    col.GenerateHiddenField = true;
        //}),
        Html.TextBoxColumn("ProductName", "NAMA BARANG","",delegate(GridColumn col){
            //col.GenerateHiddenField = true;
        }),
        Html.LabelColumn("StockQty", "ON HAND", "100px",delegate(GridColumn col){
        }),
        Html.LabelColumn("StockAvailable", "AVAILABLE", "100px",delegate(GridColumn col){
        }),
        Html.DecimalColumn("QtyRemaining", "REMAINING", "100px",delegate(GridColumn col){
            col.CreateFormat = col.UpdateFormat = "F0";
            col.DetailFormat = "N0";
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.None;
            if (Model.BookingOrderID != 0)
                col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;
        }),
        Html.DecimalColumn("Quantity", "QTY", "100px",delegate(GridColumn col){
            col.ItemAttributes = " onblur=\"calc($(this).parent().parent().index())\" ";
            col.GenerateHiddenField = true;
            col.DetailFormat = "N5";
            col.CreateFormat = col.UpdateFormat = "F5";
        }),
        Html.LabelColumn("CreatedPDQuantity", "RECEIVED", "100px",delegate(GridColumn col){
            col.CreateColumnType = col.UpdateColumnType = GridColumnType.None;
            col.DetailFormat = "N5";
        }),
        Html.LabelColumn("CreatedPBQuantity", "BILLED", "100px",delegate(GridColumn col){
            col.DetailFormat = "N5";
            col.CreateColumnType = col.UpdateColumnType = GridColumnType.None;
        }),
        Html.DropDownColumn("ConversionID", "UNIT", ddlConversion,"70px", delegate(GridColumn col){
            col.ItemAttributes = " onchange=\"unitChange($(this).parent().parent().index())\" ";
            col.DetailColumnType = GridColumnType.None;
            col.GenerateHiddenField = true;
            //if (Model.Status >= 3)
            //{
            //    //col.UpdateColumnType = GridColumnType.None;
            //    //col.DetailColumnType = GridColumnType.Label;
            //}
        }),
        Html.LabelColumn("ConversionName", "UNIT", "70px", delegate(GridColumn gc){
            gc.CreateColumnType = gc.UpdateColumnType = GridColumnType.None;
            //if (Model.Status >= 3)
            //{
            //    gc.DetailColumnType = GridColumnType.Label;
            //}
        }),
        Html.DropDownColumn("TaxType", "TAX CODE", ddlTax,"110px", delegate(GridColumn col){
            col.ItemAttributes = " onchange=\"calc($(this).parent().parent().index())\" ";
            col.DetailColumnType = GridColumnType.None;
        }),
        Html.LabelColumn("TaxTypeName", "TAX CODE", "70px", delegate(GridColumn gc){
            gc.CreateColumnType = gc.UpdateColumnType = GridColumnType.None;
        }),
        Html.DecimalColumn("AssetPrice", "HARGA/UNIT", "100px", delegate(GridColumn col)
        {
            col.GenerateHiddenField = true;
            col.ItemAttributes = " onblur=\"calc($(this).parent().parent().index())\" ";
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "G";

        }),
        Html.DecimalColumn("TotalAmount", "JMLH HARGA", "100px", delegate(GridColumn col)
        {
            col.GenerateHiddenField = true;
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "F2";
        }),
        Html.DecimalColumn("Discount","DISCOUNT","100px",delegate(GridColumn col)
        {
            col.ItemAttributes = " onblur=\"calc($(this).parent().parent().index())\" ";
            col.GenerateHiddenField = true;
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "F2";
        }),
        Html.DecimalColumn("TotalPPN", "JMLH PAJAK", "100px", delegate(GridColumn col)
        {
            col.GenerateHiddenField = true;
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "F2";
        }),
        
        Html.DecimalColumn("Total", "TOTAL HARGA", "100px", delegate(GridColumn col)
        {
            col.ItemAttributes = " onchange=\"reversecalc($(this).parent().parent().index())\" ";
            col.GenerateHiddenField = true;
            col.DetailColumnType = GridColumnType.Label;
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "F2";
        }),
    };

    GridFooter.SetPropertyDelegate subTotalFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    GridFooter.SetPropertyDelegate discountFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    GridFooter.SetPropertyDelegate taxFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    GridFooter.SetPropertyDelegate grandTotalFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    var footerColumnStart = 8;

    if (mode == UIMode.Detail)
    {
        footerColumnStart = 10;
    }
    if (Model.BookingOrderID != 0)
    {
        footerColumnStart += 1;
    }
    var subTotal = new GridFooter[]{
        Html.EmptyFooterColumn(footerColumnStart),
        Html.LabelFooterColumn("", "JUMLAH HARGA:", true, subTotalFooterDel),
        Html.DecimalFooterColumn("txtGridTotal", Convert.ToDecimal(Model.SubTotal), delegate(GridFooter f){
            f.ItemFormat = "N2";
                
        }),
    };

    var discount = new GridFooter[]{
        Html.EmptyFooterColumn(footerColumnStart),
        Html.LabelFooterColumn("", "DISCOUNT:", true, discountFooterDel),
        Html.DecimalFooterColumn("txtGridDiscount", Convert.ToDecimal(Model.Discount), delegate(GridFooter f){
            f.ItemFormat = "N2";
        }),
    };

    var taxValue = new GridFooter[]{
                Html.EmptyFooterColumn(footerColumnStart),
                Html.LabelFooterColumn("", "PAJAK:", true, taxFooterDel),
                Html.DecimalFooterColumn("txtGridPPN", Convert.ToDecimal(Model.TaxValue), delegate(GridFooter f){
                    f.ItemFormat = "N2";
            })
            };

    var grandTotal = new GridFooter[]{
                Html.EmptyFooterColumn(footerColumnStart),
                Html.LabelFooterColumn("","TOTAL HARGA:", true, grandTotalFooterDel),
                Html.DecimalFooterColumn("txtGridGrandTotal", Convert.ToDecimal(Model.GrandTotal), delegate(GridFooter f){
                    f.ItemFormat = "N2";
            })
            };

    var gridFooters = new List<GridFooter[]>()
    {

    };

    gridFooters.Add(subTotal);
    gridFooters.Add(discount);
    gridFooters.Add(taxValue);
    gridFooters.Add(grandTotal);

    var addNewButton = new Button();
    addNewButton.CssClass = "button";
    addNewButton.Text = "Add";
    addNewButton.OnClick = "addGrid1Row()";
    addNewButton.ID = "btnAddNew";
    addNewButton.Href = "#btnAddNew";
    addNewButton.Visible = mode != UIMode.Detail;

    var grid = new Grid();
    grid.IncludeAddRowScript = true;
    grid.IncludeDeleteRowButton = true;
    grid.DefaultObject = new PurchaseOrderDetailModel();
    grid.Columns = gridColumns;
    grid.ShowFooter = true;
    grid.Footers = gridFooters;
    grid.AllowSorting = false;
    grid.BelowButtons.Add(addNewButton);

    var poDeliveryGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ID","PD ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("Code", "RECEIPT NUMBER", "200px"),
        Html.DateColumn("Date", "DATE", "200px"),
        Html.LabelColumn("POSupplierNo", "SUPPLIER REFERENCE NO", "200px"),
        Html.LabelColumn("Quantity", "QTY", "200px"),
        Html.LabelColumn("Remarks", "MEMO"),
    };

    var poDeliveryGrid = new Grid();
    poDeliveryGrid.ID = "deliveryGrid";
    poDeliveryGrid.DataContainerName = "deliveryDetails";
    poDeliveryGrid.IncludeAddRowScript = false;
    poDeliveryGrid.IncludeDeleteRowButton = false;
    poDeliveryGrid.Columns = poDeliveryGridColumns;
    poDeliveryGrid.ShowFooter = false;
    poDeliveryGrid.AllowSorting = false;

    //bill
    var poBillGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ID","PB ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("Code", "BILL NUMBER", "200px"),
        Html.DateColumn("Date", "DATE", "200px"),
        Html.LabelColumn("CurrencyName", "Currency", "200px"),
        Html.LabelColumn("GrandTotal", "ORIG. AMT.", "200px", delegate (GridColumn col){
            col.DetailFormat = "N2";
        }),
        Html.LabelColumn("OutstandingAmount", "OUTSTANDING AMT", "200px", delegate (GridColumn col){
            col.DetailFormat = "N2";
        }),
        Html.LabelColumn("StatusDescription", "STATUS", "200px"),
        Html.LabelColumn("Remarks", "MEMO"),
    };

    var poBillGrid = new Grid();
    poBillGrid.ID = "billGrid";
    poBillGrid.DataContainerName = "billDetails";
    poBillGrid.IncludeAddRowScript = false;
    poBillGrid.IncludeDeleteRowButton = false;
    poBillGrid.Columns = poBillGridColumns;
    poBillGrid.ShowFooter = false;
    poBillGrid.AllowSorting = false;

    var form = new Form();
    form.Fields = formFields;

    var textBoxName = "Details_@index_ProductCode";
    var serviceUrl = Url.Content("~/WebService.asmx/RetrieveProductByKey");
    var retrieveSingleUrl = Url.Content("~/WebService.asmx/RetrieveProduct");

    TabbedGrid tabbedGrid = new TabbedGrid();
    if (mode == UIMode.Detail)
    {
        tabbedGrid.AddGrid("Item Receipts", poDeliveryGrid, ViewBag.poDeliveryList);
        tabbedGrid.AddGrid("Purchase Bill", poBillGrid, ViewBag.poBillList);
    }

    var reviseButton = new Button();
    reviseButton.CssClass = "button";
    reviseButton.Text = "Create New";
    reviseButton.Href = Url.Content("~/PurchaseOrder/Create?purchaseOrderID=" + Model.ID);
    reviseButton.Visible = mode == UIMode.Detail;

    var receiptButton = new Button();
    receiptButton.CssClass = "button";
    receiptButton.Text = "Receive";
    receiptButton.Href = Url.Content("~/PurchaseDelivery/Create?purchaseOrderID=" + Model.ID);
    receiptButton.Visible = mode == UIMode.Detail
        && Model.Status == (int)MPL.DocumentStatus.Approved
        && Model.IsReceivable;

    var billButton = new Button();
    billButton.CssClass = "button";
    billButton.Text = "Bill";
    billButton.Href = Url.Content("~/PurchaseBill/Create?purchaseOrderID=" + Model.ID);
    billButton.Visible = mode == UIMode.Detail
        && Model.Status == (int)MPL.DocumentStatus.Approved
        && Model.IsBillable;

    var vendorReturnButton = new Button();
    vendorReturnButton.CssClass = "button";
    vendorReturnButton.Text = "Authorize Return";
    vendorReturnButton.Href = Url.Content("~/VendorReturn/Create?purchaseOrderID=" + Model.ID);
    vendorReturnButton.Visible = mode == UIMode.Detail
        && Model.Status == (int)MPL.DocumentStatus.Approved;
}

<script type="text/javascript">
    $(document).ready(function () {
        window.initNumeric = function () {
            $(".decimalNumeric").numeric({
                decimal: "."
            });
            $(".decimalNumeric").focus(function () {
                var temp = $(this);
                setTimeout(function () {
                    temp.select();
                }, 100);
            });
            $(".integerNumeric").numeric(false, function () { this.value = ""; this.focus(); });
        }
        window.initDatePicker = function () {
            $("input.datepicker").datepicker({
                dateFormat: 'mm/dd/yy', showOn: 'both', buttonImage: '/Content/Icons/calendar.png',
                buttonImageOnly: true
            });
            $('img.ui-datepicker-trigger').css({ 'margin-left': '2px' });
        }

        var mode = $("#hdnMode").val();

        if (mode == "Create")
            changeCurrency();
    });
</script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Transaction/PurchaseOrder.js")"></script>
<input type="hidden" id="hdnAction" value="@action" />
<input type="hidden" id="hdnMode" value="@mode" />
@Html.AutoCompleteScript("initVendorAutoComplete", "txtVendorName", Url.Content("~/WebService.asmx/RetrieveVendorByKey"), "",
                Url.Content("~/WebService.asmx/RetrieveVendor"), "vendorName", "Code", "Name", "onSelectVendor", 50, 500)
@Html.AutoCompleteScript("initEmployeeAutoComplete", "txtEmployeeName", Url.Content("~/WebService.asmx/RetrieveEmployeeByKey"), "",
                Url.Content("~/WebService.asmx/RetrieveEmployee"), "employeeName", "Name", "RoleDescription", "onSelectEmployee", 50, 500)
@Html.GridAutoCompleteScript("initProductAutoComplete", "Grid1", textBoxName, serviceUrl, "", retrieveSingleUrl,
                "productCode", ",'customerID':'\"+getCustomerID()+\"','vendorID':'\"+getSupplierID()+\"'", "Code", "ProductName", "onSelectProduct", 50, 500)
@Html.MasterDetailForm(form, grid, Model, Model.Details, mode, "Quotation", "ID", delegate(MasterDetailFormHelper helper)
{
    helper.DetailGridTitle = "Item";
    helper.TabbedGrid = tabbedGrid;

    if (mode == UIMode.Detail)
    {
        helper.DetailGridTitle = "Item";

        helper.TabbedGrid = tabbedGrid;

        helper.VoidButton.Href = Url.Content("~/PurchaseOrder/VoidRemarks?key=" + Model.ID + "&voidFromIndex=false");
        helper.VoidButton.OnClick = "";
        helper.VoidButton.ID = "btnVoid";

        helper.CreateAnotherButton.Visible = false;
        helper.CopyTransactionButton.Visible = false;

        if (Convert.ToBoolean(ViewBag.AllowCreate))
        {
            helper.Buttons.Add(receiptButton);
            helper.Buttons.Add(billButton);
            helper.Buttons.Add(vendorReturnButton);
            //helper.Buttons.Add(reviseButton);
        }

        if (!Convert.ToBoolean(ViewBag.AllowEdit))
        {
            helper.EditButton.Visible = helper.DeleteButton.Visible = helper.SubmitButton.Visible = helper.CancelSubmitButton.Visible = helper.ApproveButton.Visible = false;
        }
        else
        {
            helper.EditButton.Visible = mode == UIMode.Detail && Model.Status != (int)MPL.DocumentStatus.Void;// && Model.Status == (int)MPL.DocumentStatus.New ;
            helper.ApproveButton.Visible = mode == UIMode.Detail && Model.Status == (int)MPL.DocumentStatus.New;
            helper.DeleteButton.Visible = helper.SubmitButton.Visible = helper.CancelSubmitButton.Visible = false;
        }

        if (!Convert.ToBoolean(ViewBag.AllowVoid))
        {
            helper.VoidButton.Visible = false;
        }
        else
        {
            helper.VoidButton.Visible = mode == UIMode.Detail && Model.Status != (int)MPL.DocumentStatus.Void && !Model.HasPD;
            //helper.VoidButton.Visible = false;
        }
    }
})
