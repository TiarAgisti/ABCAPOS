@using MPL.MVC;
@using ABCAPOS.Util;
@using ABCAPOS.Models;
@model List<TransferOrderModel>
@{
    var dataCount = (int)ViewBag.DataCount;
    var pageSize = (int)ViewBag.PageSize;
    var startIndex = (int)ViewBag.StartIndex;
    var selectedPage = startIndex / pageSize + 1;
    var pageAmount = (dataCount / 20);

    if (dataCount % 20 != 0)
    {
        pageAmount += 1;
    }

    var statement = string.Format("Page: {0} of {1}", selectedPage, pageAmount);
  
    var gridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("Code","TRANSFER NO","100px"),
        Html.DateColumn("Date","DATE"),
        Html.LabelColumn("Title","MEMO"),
        Html.LabelColumn("StatusDescription","STATUS", "",delegate(GridColumn col){
            col.SortField = "Status";
        }),
        Html.LabelColumn("GrandTotal", "AMOUNT")
    };

    var statusList = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)TransferOrderStatus.New), Text = "Pending Approval" },
        new DropDownOption(){ Value = Convert.ToString((int)TransferOrderStatus.PendingFulfillment), Text = "Pending Fulfillment" },
        new DropDownOption(){ Value = Convert.ToString((int)TransferOrderStatus.PendingReceipt), Text = "Shipped" },
        new DropDownOption(){ Value = Convert.ToString((int)TransferOrderStatus.Received), Text = "Received" },
        new DropDownOption(){ Value = Convert.ToString((int)TransferOrderStatus.Void), Text = TransferOrderStatus.Void.ToString() },
    };

    var filterList = new List<GenericFilterField>()
    {
        Html.GenericFilterDateRangeField("TRANSACTION DATE","Date"),
        Html.GenericFilterTextBoxField("TRANSFER NO","Code"),
        //Html.GenericFilterDropdownField("FROM LOCATION","FromWarehouseName"),
        //Html.GenericFilterTextBoxField("TO LOCATION","ToWarehouseName"),
        Html.GenericFilterDropDownField("STATUS","Status",statusList,typeof(int))
        
    };

    var detailButton = new GridButtonColumn();
    detailButton.CssClass = "iconContainer";
    detailButton.ButtonCssClass = "details imageButton";
    detailButton.Href = Url.Content("~/TransferOrder/Detail?key=@idPropertyValue");
    detailButton.IDPropertyName = "ID";
    detailButton.Text = "Detail";

    var approveButton = new GridButtonColumn();
    approveButton.CssClass = "iconContainer";
    approveButton.ButtonCssClass = "approve imageButton";
    approveButton.Href = Url.Content("~/TransferOrder/ApproveFromIndex?key=@idPropertyValue");
    approveButton.OnClick = "return confirm('Are you sure you want to approve this document?');";
    approveButton.IDPropertyName = "ID";
    approveButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var transferDraft = obj as TransferOrderModel;

        if (transferDraft.Status == (int)TransferOrderStatus.New && Convert.ToBoolean(ViewBag.AllowEdit))
            return true;

        return false;
    };
    approveButton.Text = "Approve";

    var printButton = new GridButtonColumn();
    printButton.CssClass = "iconContainer";
    printButton.ButtonCssClass = "print imageButton";
    printButton.OnClick = String.Format("window.open('{0}');", Url.Action("PopUp", "ReportViewer", new { type = ABCAPOS.Controllers.ReportViewerController.PrintOutType.TransferPickingTicket, queryString = SystemConstants.str_TransferOrderID + "=@idPropertyValue" }));
    printButton.IDPropertyName = "ID";
    printButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var transferOrder = obj as TransferOrderModel;

        if (transferOrder.Status >= (int)TransferOrderStatus.PendingFulfillment)
            return true;

        return false;
    };
    printButton.Text = "Print";

    var voidButton = new GridButtonColumn();
    voidButton.CssClass = "iconContainer";
    voidButton.ButtonCssClass = "cancel imageButton";
    voidButton.Href = Url.Content("~/TransferOrder/VoidRemarks?key=@idPropertyValue&voidFromIndex=true");
    voidButton.IDPropertyName = "ID";
    voidButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var transferOrder = obj as TransferOrderModel;

        if (transferOrder.Status != (int)TransferOrderStatus.Void)
            return true;

        return false;
    };
    voidButton.Text = "Void";

    var grid = new Grid();
    grid.Columns = gridColumns;
    grid.Buttons.Add(detailButton);
    grid.Buttons.Add(approveButton);
    grid.Buttons.Add(printButton);
    //grid.Buttons.Add(voidButton);
}
<script type="text/javascript">
    $(function () {
        $("[name='lnkAddNewGrid1']").hide();

        $(".cancel").live("click", function (e) {
            e.preventDefault();
            $(" <div></div>")
                .addClass("dialog")
                .attr("id", $(this).attr("data-dialog-id"))
                .appendTo("body").dialog({
                    title: "Void Remarks",
                    close: function () {
                        $(this).remove();
                    },
                    modal: true,
                    height: 180,
                    width: 700,
                    left: 0
                }).load(this.href);
        });

        $("#btnCloseVoidForm").live("click", function (e) {
            e.preventDefault();
            $(this).closest(".dialog").dialog("close");
        });
        if ($.urlParam('filter.FilterFields%5B0%5D.Selected') == null) {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            today = mm + '/' + dd + '/' + yyyy;
            $("#filter_FilterFields_0_Value").val(today);
        }
    });
    $(document).ready(function () {
        window.initDatePicker = function () {
            $("input.datepicker").datepicker({
                dateFormat: 'mm/dd/yy', showOn: 'both', buttonImage: '/Content/Icons/calendar.png',
                buttonImageOnly: true
            });
            $('img.ui-datepicker-trigger').css({ 'margin-left': '2px' });
        }
    });
</script>
@Html.GenericFilter(filterList)
@Html.IndexGrid(grid, Model, "TransferOrder", "ID", "Code", null, delegate(object obj, UIMode mode)
{
    return false;
}, delegate(IndexGridHelper helper)
    {
        if (Convert.ToBoolean(ViewBag.AllowCreate))
        {
            helper.AddNewButton.Visible = true;
        }
        else
        {
            helper.AddNewButton.Visible = false;
        }
    })
<br />
@statement