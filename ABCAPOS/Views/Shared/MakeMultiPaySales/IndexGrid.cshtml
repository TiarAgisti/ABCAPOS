@using MPL.MVC;
@using ABCAPOS.Util;
@using ABCAPOS.Models;
@model List<MakeMultiPaySalesModel>
@{
    var dataCount = (int)ViewBag.DataCount;
    var pageSize = (int)ViewBag.PageSize;
    var startIndex = (int)ViewBag.StartIndex;
    var selectedPage = startIndex / pageSize + 1;
    var pageAmount = (dataCount / 20);

    if (dataCount % 20 != 0)
    {
        pageAmount += 1;
    }

    var statement = string.Format("Page: {0} of {1}", selectedPage, pageAmount);
  
    var gridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("Code","PAYMENT NUMBER","120px"),
        Html.DateColumn("Date","DATE"),
        Html.LabelColumn("Title","MEMO"),
        Html.LabelColumn("CustomerName","CUSTOMER"),
        Html.LabelColumn("WarehouseName", "LOCATION"),
        Html.LabelColumn("TotalPayment","AMOUNT PAID", "", delegate(GridColumn col)
        {
            col.DetailFormat = "N2";  
        }),
    };

    var warehouseList = ViewBag.WarehouseList as List<WarehouseModel>;
    var ddlWarehouse = Util.GetDropDownOptions(warehouseList, "Name", "Name");
    
    var filterList = new List<GenericFilterField>()
    {
        Html.GenericFilterDateRangeField("TRANSACTION DATE","Date"),
        Html.GenericFilterTextBoxField("PAYMENT NUMBER","Code"),
        Html.GenericFilterTextBoxField("CUSTOMER","CustomerName"),
        Html.GenericFilterDropDownField("LOCATION","WarehouseName", ddlWarehouse, typeof(string)),
        
    };

    var detailButton = new GridButtonColumn();
    detailButton.CssClass = "iconContainer";
    detailButton.ButtonCssClass = "details imageButton";
    detailButton.Href = Url.Content("~/MakeMultiPaySales/Detail?key=@idPropertyValue");
    detailButton.IDPropertyName = "ID";
    detailButton.Text = "Detail";

    var voidButton = new GridButtonColumn();
    voidButton.CssClass = "iconContainer";
    voidButton.ButtonCssClass = "cancel imageButton";
    voidButton.Href = Url.Content("~/MakeMultiPaySales/VoidRemarks?key=@idPropertyValue&voidFromIndex=true");
    voidButton.OnClick = "return confirm('Are you sure you want to void this document?');";
    voidButton.IDPropertyName = "ID";
    voidButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var MakeMultiPaySales = obj as MakeMultiPaySalesModel;

        if (MakeMultiPaySales.Status != (int)MPL.DocumentStatus.Void)
            return true;

        return false;
    };
    voidButton.Text = "Void";

    var grid = new Grid();
    grid.Columns = gridColumns;
    grid.Buttons.Add(detailButton);
    
    if (Convert.ToBoolean(ViewBag.AllowVoid))
    {
        //grid.Buttons.Add(voidButton); doesn't work properly, disabling for now
    }
    
}
<script type="text/javascript">
    $(function () {
        $("[name='lnkAddNewGrid1']").hide();

        if ($.urlParam('filter.FilterFields%5B0%5D.Selected') == null) {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            today = mm + '/' + dd + '/' + yyyy;
            $("#filter_FilterFields_0_Value").val(today);
        }
    });
    $(document).ready(function () {
        window.initDatePicker = function () {
            $("input.datepicker").datepicker({
                dateFormat: 'mm/dd/yy', showOn: 'both', buttonImage: '/Content/Icons/calendar.png',
                buttonImageOnly: true
            });
            $('img.ui-datepicker-trigger').css({ 'margin-left': '2px' });
        }
    });
</script>
@Html.GenericFilter(filterList)
@Html.IndexGrid(grid, Model, "MakeMultiPaySales", "ID", "Code", null, delegate(object obj, UIMode mode)
{
    return false;
}, delegate(IndexGridHelper helper)
    {
        if (Convert.ToBoolean(ViewBag.AllowCreate))
        {
            helper.AddNewButton.Visible = true;
        }
        else
        {
            helper.AddNewButton.Visible = false;
        }
        helper.AddNewButton.Href = Url.Content("~/UncreatedMakeMultiPaySales");
    })
<br />
@statement