@using MPL.MVC;
@using ABCAPOS.Models;
@using ABCAPOS.Util;
@model PurchaseBillModel
@{
    var mode = (UIMode)ViewBag.Mode;
    ViewBag.ErrorMessage = "";

    var action = "";

    if (mode == UIMode.Create)
    {
        action = "CreatePurchaseBill";
    }
    else
    {
        action = "UpdatePurchaseBill";
    }

    var currencyList = ViewBag.CurrencyList as IEnumerable<CurrencyModel>;
    var ddlCurrency = Util.GetDropDownOptions(currencyList, "Name", "ID");

    var currencyFormField = new MPL.MVC.FormField[]{
        Html.DropDownFieldObjFor(p=>p.CurrencyID,"CURRENCY",ddlCurrency, delegate(FormField f){
            f.Style = "width:300px";
            f.DetailFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.CurrencyName,"CURRENCY", delegate(FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        })
    };
    var kursFormField = new MPL.MVC.FormField[]{
        Html.DecimalFieldObjFor(p=>p.ExchangeRate,"Kurs / Rate", delegate(FormField f){
            f.DetailFormat = f.CreateFormat = f.UpdateFormat = "G";
        })   
    };

    var yesNoRadio = new List<RadioOption>()
    {
        new RadioOption(){ Value = true,Text = "Ya", ReadOnly = mode == UIMode.Detail},
        new RadioOption(){ Value = false,Text = "Tidak", ReadOnly = mode == UIMode.Detail},
    };

    var termsList = ViewBag.TermsList as IEnumerable<TermsOfPaymentModel>;
    var ddlTerms = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)0), Text ="" }
    };
    ddlTerms.AddRange(Util.GetDropDownOptions(termsList, "Name", "ID"));

    string rowEditor = Convert.ToString(ViewBag.RowEditor);

    var m = Model;

    var formFields2 = new MPL.MVC.FormField[]{
        Html.LabelFieldObjFor(p=>p.TaxNumber, "TAX NUMBER"),
    };

    var formFields3 = new MPL.MVC.FormField[]{
         Html.TextBoxFieldObjFor(p=>p.SupplierFPNo,"SUPPLIER FP NO", delegate(FormField f){
            f.Style = "width:300px";
        }),
    };

    var formFields4 = new MPL.MVC.FormField[] {
        Html.DropDownFieldObjFor(p=>p.TermOfPayment,"TERMS OF PAYMENT", ddlTerms, delegate(FormField f){
            f.Style = "width:300px";
            f.Attributes = " onchange=\"onchangeDate()\" ";
            f.DetailFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.TermOfPaymentName,"TERMS OF PAYMENT", delegate(FormField f){
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
    };

    var formFields5 = new MPL.MVC.FormField[] {
        Html.TextBoxFieldObjFor(p=>p.Remarks,"MEMO", delegate(FormField f){
            f.Style = "width:300px";
        })
    };
    var formFields = new List<IFormField>()
    {
        Html.HiddenFieldFieldObjFor(p=>p.ID,""),
        Html.HiddenFieldFieldObjFor(p=>p.PurchaseOrderID,""),
        Html.HiddenFieldFieldObjFor(p=>p.PurchaseDeliveryID,""),
        Html.HiddenFieldFieldObjFor(p=>p.WarehouseID,""),
        Html.HiddenFieldFieldObjFor(p=>p.Status,""),
        
        Html.LabelFieldObjFor(p=>p.PurchaseOrderID,"PurchaseOrder ID", delegate(FormField f){
            f.DetailFieldType = FormFieldType.HiddenField;
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        
        Html.LabelFieldObjFor(p=>p.PurchaseDeliveryID,"PurchaseDelivery ID", delegate(FormField f){
            f.DetailFieldType = FormFieldType.HiddenField;
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        
        Html.FullRowFormFieldObj("<br /><b>Primary Information</b><br/>","<br /><b>Primary Information</b><br/>","<br /><b>Primary Information</b><br/>"),
        
        Html.TextBoxFieldObjFor(p=>p.Code,"BILL NUMBER", delegate(FormField f){
                f.Attributes = " onblur=\"checkCode(" + Model.ID + ")\" ";
                f.DetailFieldType = FormFieldType.Label;
                f.Style = "width:300px";
        }),
        Html.DualColumnFormFieldObj(
            Html.LabelFieldObjFor(p=>p.PurchaseOrderCode,"PO NUMBER", delegate(FormField f){
                f.UpdateFieldType = FormFieldType.Label;
                f.Style = "width:300px";
            }),
        //    Html.LabelFieldObjFor(p=>p.POSupplierNo,"SJ SUPPLIER", delegate(FormField f){
        //        f.Style = "width:300px";
        //    }), 20
        //),
        //Html.DualColumnFormFieldObj(
            Html.LabelFieldObjFor(p=>p.VendorName,"VENDOR"), 
            //Html.TextBoxFieldObjFor(p=>p.SupplierInvNo,"SUPPLIER INV NO", delegate(FormField f){
            //    f.Style = "width:300px";
            //}), 
            20
        ),
        Html.DualColumnFormFieldObj(
            formFields2, formFields3, 20
        ),
        //Html.FullRowFormFieldObj(rowEditor, rowEditor, rowEditor),
         Html.DualColumnFormFieldObj(
            formFields4, formFields5
            , 20
        ),
        Html.DateFieldObjFor(p=>p.Date,"DATE", delegate(FormField f){
                f.DetailFormat = "MM/dd/yyyy";
                f.CreateFormat = f.UpdateFormat = "MM/dd/yyyy";
                f.Style = "width:300px";
                f.Attributes = " onchange=\"onchangeDate()\" ";
            }),
        Html.DateFieldObjFor(p=>p.DueDate,"DUE DATE", delegate(FormField f){
                f.DetailFormat = "MM/dd/yyyy";
                f.CreateFormat = f.UpdateFormat = "MM/dd/yyyy";
                f.Style = "width:300px";
            }),
        Html.FullRowFormFieldObj("<br />","<br />","<br />"),
        
        Html.FullRowFormFieldObj("<br /><b>Clasifications</b><br/>","<br /><b>Clasifications</b><br/>","<br /><b>Clasifications</b><br/>"),
        Html.DualColumnFormFieldObj(
            Html.LabelFieldObjFor(p=>p.DepartmentName,"DEPARTMENT"),
            Html.RadioButtonFieldObjFor(p=>p.PurchaseTax,"FAKTUR PAJAK PEMBELIAN", yesNoRadio), 20
        ),
        Html.DualColumnFormFieldObj(
            currencyFormField,
            kursFormField, 20
        ),
        Html.LabelFieldObjFor(p=>p.StatusDescription,"STATUS", delegate(FormField f)
        {
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
        }),
        Html.LabelFieldObjFor(p=>p.OutstandingAmount,"OUTSTANDING AMT", delegate(FormField f)
        {
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
            f.DetailFormat = "N2";
        }),
        
        Html.LabelFieldObjFor(p=>p.VoidRemarks,"VOID REMARKS", delegate(FormField f)
        {
            f.CreateFieldType = f.UpdateFieldType = FormFieldType.None;
            
            if(string.IsNullOrEmpty(Model.VoidRemarks))
            {
                f.DetailFieldType = FormFieldType.None;
            }
        }),
    };

    var gridColumns = new List<GridColumn>()
    {
        Html.HiddenFieldColumn("ProductID"),
        Html.HiddenFieldColumn("ItemNo"),
        Html.HiddenFieldColumn("PurchaseOrderItemNo"),
        Html.HiddenFieldColumn("TaxType"),
        Html.LabelColumn("ProductCode","ITEM","115px",delegate(GridColumn col){
            col.GenerateHiddenField = true;
        }),
        Html.LabelColumn("ProductName", "NAMA BARANG","250px",delegate(GridColumn col){
            col.GenerateHiddenField = true;
        }),
        Html.LabelColumn("StockQty", "ON HAND", "50px",delegate(GridColumn col){
        }),
        Html.LabelColumn("CreatedPOQuantity", "QTY PO", "100px", delegate(GridColumn col){
            col.CreateFormat = col.UpdateFormat = "N5";
            col.DetailFormat = "N5";
        }),
        Html.LabelColumn("CreatedPDQuantity", "QTY RECEIVED", "100px", delegate(GridColumn col){
            col.CreateFormat = col.UpdateFormat = "N5";
            col.DetailFormat = "N5";
        }),
        Html.LabelColumn("CreatedPBQuantity", "QTY BILLED", "100px", delegate(GridColumn col){
            col.CreateFormat = col.UpdateFormat = "N5";
            col.DetailFormat = "N5";
        }),
        Html.DecimalColumn("StrQuantity", "QTY", "100px", delegate(GridColumn col){
            col.ItemAttributes = " onblur=\"calc($(this).parent().parent().index())\" ";
            col.CreateFormat = col.UpdateFormat = "F5";
            col.DetailFormat = "N5";
            col.DetailColumnType = GridColumnType.None;
        }),
        Html.DecimalColumn("Quantity", "QTY", "100px", delegate(GridColumn col){
            col.DetailFormat = "N5";
            col.CreateColumnType = col.UpdateColumnType = GridColumnType.None;
            col.DetailColumnType = GridColumnType.Label;
        }),
        Html.LabelColumn("ConversionName", "UNITS", "50px", delegate(GridColumn col)
        {
            col.GenerateHiddenField = true;
            //col.CreateFormat = col.UpdateFormat = col.DetailFormat = "N0";
        }),
        
        Html.LabelColumn("TaxTypeName", "TAX CODE", "50px", delegate(GridColumn col)
        {
            col.GenerateHiddenField = true;
            //col.CreateFormat = col.UpdateFormat = col.DetailFormat = "N0";
        }),
                
        Html.DecimalColumn("AssetPrice", "HARGA/UNIT", "50px", delegate(GridColumn col)
        {
            col.ItemAttributes = " onblur=\"calc($(this).parent().parent().index())\" ";
            //col.DetailColumnType = GridColumnType.Label;
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "N2";
            col.GenerateHiddenField = true;
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;
        }),
        

        Html.DecimalColumn("TotalAmount", "JMLH HARGA", "50px", delegate(GridColumn col)
        {
            col.CreateFormat = col.UpdateFormat = "N2";
            col.DetailFormat = "N2";
            col.GenerateHiddenField = true;
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;

        }),
        
        Html.DecimalColumn("Discount","DISCOUNT","100px",delegate(GridColumn col)
        {
            col.ItemAttributes = " onblur=\"calc($(this).parent().parent().index())\" ";
            col.GenerateHiddenField = true;
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "F2";
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;
        }),
        
        Html.DecimalColumn("TotalPPN", "JMLH PAJAK", "50px", delegate(GridColumn col)
        {
            col.CreateFormat = col.UpdateFormat = "N2";
            col.DetailFormat = "N2";
            col.GenerateHiddenField = true;
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;

        }),
        
        //Html.DecimalColumn("StrTotal", "TOTAL HARGA", "100px", delegate(GridColumn col)
        //{
        //    col.ItemAttributes = " onchange=\"reversecalc($(this).parent().parent().index())\" ";
        //    col.GenerateHiddenField = true;
        //    col.DetailColumnType = GridColumnType.None;
        //    col.CreateFormat = col.UpdateFormat = "N2";
        //}),
        
        Html.DecimalColumn("Total", "TOTAL HARGA", "100px", delegate(GridColumn col)
        {
            col.ItemAttributes = " onchange=\"reversecalc($(this).parent().parent().index())\" ";
            col.DetailFormat = "N2";
            col.CreateFormat = col.UpdateFormat = "N2";
            col.GenerateHiddenField = true;
            col.CreateColumnType = col.UpdateColumnType = col.DetailColumnType = GridColumnType.Label;
        }),
    };

    GridFooter.SetPropertyDelegate subTotalFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    GridFooter.SetPropertyDelegate discountFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    GridFooter.SetPropertyDelegate taxFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    GridFooter.SetPropertyDelegate grandTotalFooterDel = delegate(GridFooter f)
    {
        f.Attributes = "colspan = 3";
    };

    var footerColumnStart = 10;
    var subTotal = new GridFooter[]{
            Html.EmptyFooterColumn(footerColumnStart),
            Html.LabelFooterColumn("", "JUMLAH HARGA:", true, subTotalFooterDel),
            Html.DecimalFooterColumn("txtGridTotal", Convert.ToDecimal(Model.Amount), delegate(GridFooter f){
                f.ItemFormat = "N2";
            }),
        };

    var discount = new GridFooter[]{
        Html.EmptyFooterColumn(footerColumnStart),
        Html.LabelFooterColumn("", "DISCOUNT:", true, discountFooterDel),
        Html.DecimalFooterColumn("txtGridDiscount", Convert.ToDecimal(Model.DiscountAmount), delegate(GridFooter f){
            f.ItemFormat = "N2";
        }),
    };

    var taxValue = new GridFooter[]{
                Html.EmptyFooterColumn(footerColumnStart),
                Html.LabelFooterColumn("", "PAJAK:", true, taxFooterDel),
                Html.DecimalFooterColumn("txtGridPPN", Convert.ToDecimal(Model.TaxAmount), delegate(GridFooter f){
                    f.ItemFormat = "N2";
            })
            };

    var grandTotal = new GridFooter[]{
                Html.EmptyFooterColumn(footerColumnStart),
                Html.LabelFooterColumn("","TOTAL HARGA:", true, grandTotalFooterDel),
                Html.DecimalFooterColumn("txtGridGrandTotal", Convert.ToDecimal(Model.GrandTotal), delegate(GridFooter f){
                    f.ItemFormat = "N2";
            })
            };

    var gridFooters = new List<GridFooter[]>()
    {

    };

    gridFooters.Add(subTotal);
    gridFooters.Add(discount);
    gridFooters.Add(taxValue);
    gridFooters.Add(grandTotal);

    var paymentGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("MakeMultiPayID","PAYMENT ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("PaymentCode", "PAYMENT NUMBER", "200px"),
        Html.DateColumn("PaymentDate", "DATE", "200px"),
        Html.DateColumn("PaymentEventDate", "PAYMENT EVENT DATE", "200px"),
        Html.LabelColumn("DiscountTaken", "DISCOUNT TAKEN", "200px", delegate(GridColumn col){
            col.DetailFormat = "N2";
        }),
        Html.LabelColumn("Amount", "AMOUNT", "200px", delegate(GridColumn col){
            col.DetailFormat = "N2";
        })
    };

    footerColumnStart = 1;
    var beforeGrandTotalPayment = new GridFooter[]{
            Html.EmptyFooterColumn(footerColumnStart),
            Html.LabelFooterColumn("","JUMLAH HARGA:", true, grandTotalFooterDel),
            Html.DecimalFooterColumn("txtGridBeforeTotalAmount", Convert.ToDecimal(Model.BeforePaymentAmount), delegate(GridFooter f){
                f.ItemFormat = "N2";
        })
    };
    var discountTaken = new GridFooter[]{
            Html.EmptyFooterColumn(footerColumnStart),
            Html.LabelFooterColumn("","DISCOUNT TAKEN:", true, grandTotalFooterDel),
            Html.DecimalFooterColumn("txtGridDiscountTaken", Convert.ToDecimal(Model.DiscountTaken), delegate(GridFooter f){
                f.ItemFormat = "N2";
        })
    };
    var grandTotalPayment = new GridFooter[]{
            Html.EmptyFooterColumn(footerColumnStart),
            Html.LabelFooterColumn("","TOTAL HARGA:", true, grandTotalFooterDel),
            Html.DecimalFooterColumn("txtGridTotalAmount", Convert.ToDecimal(Model.PaymentAmount), delegate(GridFooter f){
                f.ItemFormat = "N2";
        })
    };

    var gridFooterPayments = new List<GridFooter[]>()
    {

    };
    
    gridFooterPayments.Add(beforeGrandTotalPayment);
    gridFooterPayments.Add(discountTaken);
    gridFooterPayments.Add(grandTotalPayment);
    //gridFooter Payment
    var paymentGrid = new Grid();
    paymentGrid.ID = "paymentGrid";
    paymentGrid.DataContainerName = "paymentDetails";
    paymentGrid.IncludeAddRowScript = false;
    paymentGrid.IncludeDeleteRowButton = false;
    paymentGrid.Columns = paymentGridColumns;
    paymentGrid.ShowFooter = true;
    paymentGrid.Footers = gridFooterPayments;
    paymentGrid.AllowSorting = false;
    //paymentGrid.Footers = gridFooterPayments;
  
    var applyCreditGridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ApplyBillCreditID","APPLICATION ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("ApplyCode", "APPLICATION NUMBER", "200px"),
        Html.DateColumn("ApplyDate", "DATE", "200px"),
        Html.LabelColumn("Amount", "AMOUNT", "200px", delegate(GridColumn col){
            col.DetailFormat = "N2";
        })
    };

    var applyCreditGrid = new Grid();
    applyCreditGrid.ID = "applyCreditGrid";
    applyCreditGrid.DataContainerName = "applyCreditDetails";
    applyCreditGrid.IncludeAddRowScript = false;
    applyCreditGrid.IncludeDeleteRowButton = false;
    applyCreditGrid.Columns = applyCreditGridColumns;
    applyCreditGrid.ShowFooter = false;
    applyCreditGrid.AllowSorting = false;

    var grid = new Grid();
    grid.IncludeAddRowScript = true;
    grid.IncludeDeleteRowButton = true;
    grid.DefaultObject = new PurchaseDeliveryDetailModel();
    grid.Columns = gridColumns;
    grid.ShowFooter = true;
    grid.Footers = gridFooters;
    grid.AllowSorting = false;
    

    var payButton = new Button();
    payButton.CssClass = "button";
    payButton.Text = "Make Payment";
    payButton.Href = Url.Content("~/MakeMultiPay/Create?purchaseBillID=" + Model.ID);
    payButton.Visible = mode == UIMode.Detail
        && (Model.OutstandingAmount > 0) && (Model.Status > 0);


    var form = new Form();
    form.Fields = formFields;

    TabbedGrid tabbedGrid = new TabbedGrid();
    if(mode == UIMode.Detail)
    {
        tabbedGrid.AddGrid("Payments", paymentGrid, ViewBag.PaymentList);
        tabbedGrid.AddGrid("Credit Applications", applyCreditGrid, ViewBag.ApplyCreditList);
    }

}
<script type="text/javascript">
    $(function () {
        var action = $("#hdnAction").val();
        $("[name='lnkAddNewGrid1']").hide();
        $('#Form1').attr("action", "/PurchaseBill/" + action);

        $("#btnVoid").live("click", function (e) {
            e.preventDefault();
            $(" <div></div>")
                .addClass("dialog")
                .attr("id", $(this).attr("data-dialog-id"))
                .appendTo("body").dialog({
                    title: $(this).attr("Void Remarks"),
                    close: function () {
                        $(this).remove();
                    },
                    modal: true,
                    height: 180,
                    width: 700,
                    left: 0
                }).load(this.href);
        });

        $("#btnCloseVoidForm").live("click", function (e) {
            e.preventDefault();
            $(this).closest(".dialog").dialog("close");
        });

        addPOUrl();

        var noOfRows = $("#paymentGrid tbody tr").length;

        for (x = 0; x < noOfRows; x++) {
            var doID = $("#paymentDetails_" + x + "_MakeMultiPayID").val();
            var doCode = $("#paymentDetails_" + x + "_PaymentCode").text();
            var doLink = "/MakeMultiPay/Detail?key=" + doID;

            $("#paymentDetails_" + x + "_PaymentCode").replaceWith('<a href="' + doLink + '" style="color: #505abc;">' + doCode + '</a>');
        }

        var noOfRows = $("#applyCreditGrid tbody tr").length;

        for (x = 0; x < noOfRows; x++) {
            var applyCreditID = $("#applyCreditDetails_" + x + "_ApplyBillCreditID").val();
            var applyCreditCode = $("#applyCreditDetails_" + x + "_ApplyCode").text();
            var applyCreditLink = "/ApplyBillCredit/Detail?key=" + applyCreditID;

            $("#applyCreditDetails_" + x + "_ApplyCode").replaceWith('<a href="' + applyCreditLink + '" style="color: #505abc;">' + applyCreditCode + '</a>');
        }
    });

    function addPOUrl() {
        var mode = $("#hdnMode").val();

        if (mode == "Detail" || mode == "Create") {
            var poID = $("#hdnPurchaseOrderID").val();
            var poCode = $("#lblPurchaseOrderCode").text();
            var poTitle = $("#hdnPurchaseOrderTitle").val();

            var poLink = "/PurchaseOrder/Detail?key=" + poID;

            $("#lblPurchaseOrderCode").replaceWith('<a href="' + poLink + '">' + poCode + '</a>');
        }
    }
</script>
<script type="text/javascript">
    $(document).ready(function () {
        window.initNumeric = function () {
            $(".decimalNumeric").numeric({
                decimal: "."
            });
            $(".decimalNumeric").focus(function () {
                var temp = $(this);
                setTimeout(function () {
                    temp.select();
                }, 100);
            });
            $(".integerNumeric").numeric(false, function () { this.value = ""; this.focus(); });
        }
        window.initDatePicker = function () {
            $("input.datepicker").datepicker({
                dateFormat: 'mm/dd/yy', showOn: 'both', buttonImage: '/Content/Icons/calendar.png',
                buttonImageOnly: true
            });
            $('img.ui-datepicker-trigger').css({ 'margin-left': '2px' });
        }
        //window.initNumeric = function () {
        //    $(".decimalNumeric").numeric({
        //        decimal: "."
        //    });
        //    $(".decimalNumeric").focus(function () {
        //        var temp = $(this);
        //        setTimeout(function () {
        //            temp.select();
        //        }, 100);
        //    });
        //    $(".integerNumeric").numeric(false, function () { this.value = ""; this.focus(); });
        //}
    });
</script>
<script type="text/javascript" src="@Url.Content("~/Scripts/Transaction/PurchaseBill.js")"></script>
<input type="hidden" id="hdnAction" value="@action" />
<input type="hidden" id="hdnMode" value="@ViewBag.Mode" />
@Html.AutoCompleteScript("initEmployeeAutoComplete", "txtEmployeeName", Url.Content("~/WebService.asmx/RetrieveEmployeeByKey"), "",
                Url.Content("~/WebService.asmx/RetrieveEmployee"), "employeeName", "Name", "RoleDescription", "onSelectEmployee", 50, 500)
@Html.MasterDetailForm(form, grid, Model, Model.Details, mode, "PurchaseBill", "ID", delegate(MasterDetailFormHelper helper)
    {
        helper.DetailGridTitle = "Item";
        helper.TabbedGrid = tabbedGrid;
        helper.CreateAnotherButton.Visible = false;
        helper.EditButton.Visible = false;
        if (mode == UIMode.Detail)
        {
            helper.VoidButton.Href = Url.Content("~/PurchaseBill/VoidRemarks?key=" + Model.ID + "&voidFromIndex=false");
            helper.VoidButton.OnClick = "";
            helper.VoidButton.ID = "btnVoid";
            helper.BackToListButton.Href = Url.Content("~/PurchaseBill");

            if (!Convert.ToBoolean(ViewBag.AllowCreate))
            {
                helper.CreateAnotherButton.Visible = false;
            }

            if (Convert.ToBoolean(ViewBag.AllowCreate))
            {
                helper.Buttons.Add(payButton);
            }

            if (!Convert.ToBoolean(ViewBag.AllowEdit))
            {
                helper.EditButton.Visible = helper.CreateAnotherButton.Visible = helper.DeleteButton.Visible = helper.SubmitButton.Visible = helper.CancelSubmitButton.Visible = helper.ApproveButton.Visible = false;
            }
            else
            {
                helper.EditButton.Visible = mode == UIMode.Detail && Model.Status != (int)MPL.DocumentStatus.Void;
                helper.CreateAnotherButton.Href = Url.Content("~/UncreatedPurchaseBill");
                helper.CreateAnotherButton.Text = "Create New";
                //helper.VoidButton.Visible = mode == UIMode.Detail && Model.Status != (int)PurchaseDeliveryStatus.Void;
                helper.DeleteButton.Visible = helper.SubmitButton.Visible = helper.CancelSubmitButton.Visible = helper.ApproveButton.Visible = false;
            }

            if (!Convert.ToBoolean(ViewBag.AllowVoid))
            {
                helper.VoidButton.Visible = false;
            }
            else
            {
                helper.VoidButton.Visible = mode == UIMode.Detail && Model.Status != (int)MPL.DocumentStatus.Void;
            }
            helper.CopyTransactionButton.Visible = false;
        }
    })
