@using MPL.MVC;
@using ABCAPOS.Util;
@using ABCAPOS.Models;
@model List<PurchaseBillModel>
@{
    var dataCount = (int)ViewBag.DataCount;
    var pageSize = (int)ViewBag.PageSize;
    var startIndex = (int)ViewBag.StartIndex;
    var selectedPage = startIndex / pageSize + 1;
    var pageAmount = (dataCount / 20);

    if (dataCount % 20 != 0)
    {
        pageAmount += 1;
    }

    var statement = string.Format("Page: {0} of {1}", selectedPage, pageAmount);
  
    var gridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("PurchaseOrderID","PurchaseOrder ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("PurchaseOrderTitle","Purchase Order Title","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("Code","BILL NUMBER", "180px", delegate(GridColumn col)
        {
            col.Style = "text-align:center;width:180px;";
        }),
        Html.DateColumn("Date","DATE", "80px", delegate(GridColumn col)
        {
            col.Style = "text-align:center;width:80px;";
        }),
        Html.LabelColumn("VendorName","VENDOR", "300px"),
        Html.LabelColumn("PurchaseOrderCode","PO NUMBER", "180px", delegate(GridColumn col)
        {
            col.Style = "text-align:center;width:180px;";
        }),
        Html.LabelColumn("POSupplierNo","SJ SUPPLIER", "180px", delegate(GridColumn col)
        {
            col.Style = "text-align:center;width:180px;";
        }),
        Html.LabelColumn("GrandTotal","Amount", "180px", delegate(GridColumn col)
        {
            col.DetailFormat = "N2";
            col.SortField = "Amount";
            col.Style = "text-align:right;";
        }),
        Html.LabelColumn("OutstandingAmount","OutStanding", "180px", delegate(GridColumn col)
        {
            col.DetailFormat = "N2";
            col.SortField = "Amount";
            col.Style = "text-align:right;";
        }),
        Html.LabelColumn("SupplierFPNo","SUPPLIER FP NO", "180px", delegate(GridColumn col)
        {
            col.Style = "text-align:center;width:180px;";
        }),
        Html.LabelColumn("Remarks","MEMO"),
        Html.LabelColumn("StatusDesc","STATUS", "80px",delegate(GridColumn col){
            col.SortField = "Status";
        })
    };

    var statusList = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = "Open", Text = "New" },
        new DropDownOption(){ Value = "Paid In Full", Text = "Paid In Full" },
        new DropDownOption(){ Value = PurchaseBillStatus.Void.ToString(), Text = PurchaseBillStatus.Void.ToString() },
        //new DropDownOption(){ Value = Convert.ToString((int)PurchaseBillStatus.New), Text = "New" },
        //new DropDownOption(){ Value = Convert.ToString((int)PurchaseBillStatus.Paid), Text = "Paid In Full" },
        //new DropDownOption(){ Value = Convert.ToString((int)PurchaseBillStatus.Void), Text = PurchaseBillStatus.Void.ToString() },
    };

    var filterList = new List<GenericFilterField>()
    {
        Html.GenericFilterDateRangeField("TRANSACTION DATE","Date"),
        Html.GenericFilterTextBoxField("BILL NUMBER","Code"),
        Html.GenericFilterTextBoxField("VENDOR","VendorName"),
        Html.GenericFilterTextBoxField("PO NUMBER","PurchaseOrderCode"),
        Html.GenericFilterTextBoxField("SJ SUPPLIER", "POSupplierNo"),
        Html.GenericFilterTextBoxField("SUPPLIER INV NO", "SupplierInvNo"),
        Html.GenericFilterTextBoxField("SUPPLIER FP NO", "SupplierFPNo"),
        Html.GenericFilterDropDownField("STATUS","StatusDesc",statusList,typeof(string))    
    };

    var detailButton = new GridButtonColumn();
    detailButton.CssClass = "iconContainer";
    detailButton.ButtonCssClass = "details imageButton";
    detailButton.Href = Url.Content("~/PurchaseBill/Detail?key=@idPropertyValue");
    detailButton.IDPropertyName = "ID";
    detailButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var bill = obj as PurchaseBillModel;

        return true;
    };
    detailButton.Text = "Detail";

    //var voidButton = new GridButtonColumn();
    //voidButton.CssClass = "iconContainer openPopUp void";
    //voidButton.ButtonCssClass = "cancel imageButton";
    //voidButton.Href = Url.Content("~/PurchaseBill/VoidRemarks?key=@idPropertyValue&voidFromIndex=true");
    //voidButton.IDPropertyName = "ID";
    //voidButton.ShowDelegate = delegate(object obj, UIMode mode)
    //{
    //    var quotation = obj as PurchaseBillModel;

    //    if (quotation.Status != (int)PurchaseBillStatus.Void)
    //        return true;

    //    return false;
    //};
    //voidButton.Text = "Void";

    var grid = new Grid();
    grid.Columns = gridColumns;
    grid.Buttons.Add(detailButton);

    //if (Convert.ToBoolean(ViewBag.AllowVoid))
    //{
    //    grid.Buttons.Add(voidButton);
    //}
    
}
<script type="text/javascript">
    $(function () {

        addTooltip();
        if ($.urlParam('filter.FilterFields%5B0%5D.Selected') == null) {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            today = mm + '/' + dd + '/' + yyyy;
            $("#filter_FilterFields_0_Value").val(today);
        }
    });
    $(document).ready(function () {
        window.initDatePicker = function () {
            $("input.datepicker").datepicker({
                dateFormat: 'mm/dd/yy', showOn: 'both', buttonImage: '/Content/Icons/calendar.png',
                buttonImageOnly: true
            });
            $('img.ui-datepicker-trigger').css({ 'margin-left': '2px' });
        }
    });
    function addTooltip() {
        var noOfRows = $("#Grid1 tbody tr").length;

        for (x = 0; x < noOfRows; x++) {
            var purchaseOrderID = $("#Details_" + x + "_PurchaseOrderID").val();
            var purchaseOrderCode = $("#Details_" + x + "_PurchaseOrderCode").text();
            var purchaseOrderTitle = $("#Details_" + x + "_PurchaseOrderTitle").val();

            var link = "/PurchaseOrder/Detail?key=" + purchaseOrderID;
            $("#Details_" + x + "_PurchaseOrderCode").replaceWith('<a href="' + link + '" title="' + purchaseOrderTitle + '">' + purchaseOrderCode + '</a>');
        }
    }
</script>
@Html.GenericFilter(filterList)
@Html.IndexGrid(grid, Model, "PurchaseBill", "ID", "Name", null, delegate(object obj, UIMode mode)
{
    return false;
}, delegate(IndexGridHelper helper)
{
    if (Convert.ToBoolean(ViewBag.AllowCreate))
    {
        helper.AddNewButton.Visible = true;
    }
    else
    {
        helper.AddNewButton.Visible = false;
    }

    helper.AddNewButton.Href = Url.Content("~/UncreatedPurchaseBill");
})
<br />
@statement