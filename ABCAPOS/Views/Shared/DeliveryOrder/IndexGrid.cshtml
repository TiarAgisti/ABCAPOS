@using MPL.MVC;
@using ABCAPOS.Util;
@using ABCAPOS.Models;
@model List<DeliveryOrderModel>
@{
    var dataCount = (int)ViewBag.DataCount;
    var pageSize = (int)ViewBag.PageSize;
    var startIndex = (int)ViewBag.StartIndex;
    var selectedPage = startIndex / pageSize + 1;
    var pageAmount = (dataCount / 20);

    if (dataCount % 20 != 0)
    {
        pageAmount += 1;
    }

    var statement = string.Format("Page: {0} of {1}", selectedPage, pageAmount);
  
    var gridColumns = new List<GridColumn>()
    {
        Html.LabelColumn("ID","ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("SalesOrderID","Sales Order ID","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.LabelColumn("SalesOrderTitle","Judul Sales Order","",delegate(GridColumn col){
            col.DetailColumnType = GridColumnType.HiddenField;
        }),
        Html.CheckBoxColumn("SJReturnBack", "SJ Kembali", false, delegate(GridColumn col){
            col.Style = "text-align:center;width:50px; ";
            col.ItemAttributes = " onchange=\"isSJChange($(this).parent().parent().index())\" ";
            
        }),
        Html.LabelColumn("Code","SJ NO","120px"),
        Html.DateColumn("Date","DATE"),
        Html.LabelColumn("SalesOrderCode","REF SO","120px"),
        Html.LabelColumn("CustomerName","CUSTOMER"),
        Html.LabelColumn("ShippAddress","SHIPING ADDRESS"),
        Html.LabelColumn("StatusDescription","STATUS", "100px",delegate(GridColumn col){
            col.SortField = "Status";
        }),
        Html.LabelColumn("Remarks","MEMO"),
    };

    var statusList = new List<DropDownOption>()
    {
        new DropDownOption(){ Value = Convert.ToString((int)DeliveryOrderStatus.New), Text = "Picked" },
        //new DropDownOption(){ Value = Convert.ToString((int)DeliveryOrderStatus.Packed), Text = "Packed" },
        new DropDownOption(){ Value = Convert.ToString((int)DeliveryOrderStatus.Shipped), Text = "Shipped" },
        new DropDownOption(){ Value = Convert.ToString((int)MPL.DocumentStatus.Void), Text = MPL.DocumentStatus.Void.ToString() },
    };
    
    var warehouseList = ViewBag.WarehouseList as List<WarehouseModel>;
    var ddlWarehouse = Util.GetDropDownOptions(warehouseList, "Name", "Name");
    
    var customerGroupList = ViewBag.CustomerGroupList as List<CustomerGroupModel>;
    var ddlCustomerGroup = Util.GetDropDownOptions(customerGroupList, "Name", "ID");
    
    var filterList = new List<GenericFilterField>()
    {
        Html.GenericFilterDateRangeField("TRANSACTION DATE","Date"),
        Html.GenericFilterTextBoxField("SJ NO","Code"),
        Html.GenericFilterTextBoxField("REF SO","SalesOrderCode"),
        Html.GenericFilterTextBoxField("CUSTOMER","CustomerName"),
        Html.GenericFilterDropDownField("LOCATION","WarehouseName", ddlWarehouse, typeof(string)),
        Html.GenericFilterDropDownField("STATUS","Status", statusList,typeof(int))
        
    };

    var detailButton = new GridButtonColumn();
    detailButton.CssClass = "iconContainer";
    detailButton.ButtonCssClass = "details imageButton";
    detailButton.Href = Url.Content("~/DeliveryOrder/Detail?key=@idPropertyValue");
    detailButton.IDPropertyName = "ID";
    detailButton.Text = "Detail";

    var approveButton = new GridButtonColumn();
    approveButton.CssClass = "iconContainer";
    approveButton.ButtonCssClass = "approve imageButton";
    approveButton.Href = Url.Content("~/DeliveryOrder/ApproveFromIndex?key=@idPropertyValue");
    approveButton.OnClick = "return confirm('Are you sure you want to mark packed this document?');";
    approveButton.IDPropertyName = "ID";
    approveButton.ShowDelegate = delegate(object obj, UIMode mode)
    {
        var deliveryOrder = obj as DeliveryOrderModel;

        if (deliveryOrder.Status == (int)MPL.DocumentStatus.New && Convert.ToBoolean(ViewBag.AllowEdit))
            return true;

        return false;
    };
    approveButton.Text = "Setujui";

    var printButton = new GridButtonColumn();
    printButton.CssClass = "iconContainer";
    printButton.ButtonCssClass = "print imageButton";
    printButton.OnClick = "if (confirm('Are you sure you want to print this document?')) { " + String.Format("window.open('{0}');", Url.Action("PopUp", "ReportViewer", new { type = ABCAPOS.Controllers.ReportViewerController.PrintOutType.DeliveryOrder, queryString = "deliveryOrderID=@idPropertyValue" })) + " } ";
    printButton.IDPropertyName = "ID";
    printButton.Text = "Cetak";

    //var voidButton = new GridButtonColumn();
    //voidButton.CssClass = "iconContainer";
    //voidButton.ButtonCssClass = "cancel imageButton";
    //voidButton.Href = Url.Content("~/DeliveryOrder/VoidFromIndex?key=@idPropertyValue");
    //voidButton.OnClick = "return confirm('Apakah Anda yakin ingin membatalkan dokumen ini?');";
    //voidButton.IDPropertyName = "ID";
    //voidButton.ShowDelegate = delegate(object obj, UIMode mode)
    //{
    //    var deliveryOrder = obj as DeliveryOrderModel;

    //    if (deliveryOrder.Status != (int)DeliveryOrderStatus.Void)
    //        return true;

    //    return false;
    //};
    //voidButton.Text = "Void";

    var grid = new Grid();
    grid.Columns = gridColumns;
    grid.Buttons.Add(detailButton);
    //grid.Buttons.Add(approveButton);
    grid.Buttons.Add(printButton);

    //if (Convert.ToBoolean(ViewBag.AllowVoid))
    //{
    //    grid.Buttons.Add(voidButton);
    //}
}
<script type="text/javascript">
    $(function () {
        addTooltip();
        if ($.urlParam('filter.FilterFields%5B0%5D.Selected') == null) {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();

            today = mm + '/' + dd + '/' + yyyy;
            $("#filter_FilterFields_0_Value").val(today);
        }
    });
    $(document).ready(function () {
        window.initDatePicker = function () {
            $("input.datepicker").datepicker({
                dateFormat: 'mm/dd/yy', showOn: 'both', buttonImage: '/Content/Icons/calendar.png',
                buttonImageOnly: true
            });
            $('img.ui-datepicker-trigger').css({ 'margin-left': '2px' });
        }
    });
    function addTooltip() {
        var noOfRows = $("#Grid1 tbody tr").length;

        for (x = 0; x < noOfRows; x++) {
            var salesOrderID = $("#Details_" + x + "_SalesOrderID").val();
            var salesOrderCode = $("#Details_" + x + "_SalesOrderCode").text();
            var salesOrderTitle = $("#Details_" + x + "_SalesOrderTitle").val();

            var salesOrderLink = "/SalesOrder/Detail?key=" + salesOrderID;

            $("#Details_" + x + "_SalesOrderCode").replaceWith('<a href="' + salesOrderLink + '" title="' + salesOrderTitle + '">' + salesOrderCode + '</a>');
        }
    }
    function isSJChange(index) {
        
        var doID = $("#Details_" + index + "_ID").val();
        
        var isSJReturn = $("#Details_" + index + "_SJReturnBack").is(':checked');
        $.ajax({
            type: "POST",
            async: false,
            url: "/Webservice.asmx/UpdateDeliveryOrderSJReturnByDOID",
            data: "{doID: " + doID + ", isSJReturn: " + isSJReturn + "}",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                
            }
        });
    }
</script>
@Html.GenericFilter(filterList)
@Html.IndexGrid(grid, Model, "DeliveryOrder", "ID", "Code", null, delegate(object obj, UIMode mode)
{
    return false;
}, delegate(IndexGridHelper helper)
    {
        if (Convert.ToBoolean(ViewBag.AllowCreate))
        {
            helper.AddNewButton.Visible = true;
        }
        else
        {
            helper.AddNewButton.Visible = false;
        }

        helper.AddNewButton.Href = Url.Content("~/UncreatedDO/");
    })
<br />
@statement